<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 29 Oct 2025 21:25:19 GMT</lastBuildDate>
    <item>
      <title>TheStageAI/TheWhisper：优化后的 Whisper 模型速度提高了 3 倍，适合流媒体和设备上使用</title>
      <link>https://www.reddit.com/r/programming/comments/1ojgqf4/thestageaithewhisper_up_to_3x_faster_optimized/</link>
      <description><![CDATA[ 由   提交 /u/ashvar   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojgqf4/thestageaithewhisper_up_to_3x_faster_optimized/</guid>
      <pubDate>Wed, 29 Oct 2025 21:10:10 GMT</pubDate>
    </item>
    <item>
      <title>现在平均代码库有 50% 的依赖项——这可持续吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1ojdrv9/the_average_codebase_is_now_50_dependencies_is/</link>
      <description><![CDATA[我看到一份内部报告显示，大多数项目在修补依赖项上花费的精力比编写应用程序逻辑更多。 “构建更少，依赖更多”是否达到了临界点？   由   提交/u/Legitimate_Sun1783   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojdrv9/the_average_codebase_is_now_50_dependencies_is/</guid>
      <pubDate>Wed, 29 Oct 2025 19:16:55 GMT</pubDate>
    </item>
    <item>
      <title>Surf 更新：Firefox 144 的新 TLS 指纹</title>
      <link>https://www.reddit.com/r/programming/comments/1ojd7rf/surf_update_new_tls_fingerprints_for_firefox_144/</link>
      <description><![CDATA[对 Surf 进行更新，Go 的浏览器模拟 HTTP 客户端。 最新版本添加了对与以下客户端的行为相匹配的新 TLS 指纹的支持：  Firefox 144 私密模式下的 Firefox 144  这些指纹包括 TLS 扩展、签名算法、支持的组、密码套件的准确排序，以及使用正确的 GREASE 和密钥共享行为。 JA3 和 JA4 哈希值与真实浏览器匹配，包括 JA4-R 和 JA4-O。 HTTP/2 Akamai 指纹识别也保持一致。 标准模式和私有模式都得到完全保真度支持，包括支持 FakeRecordSizeLimit、支持 zlib、brotli 和 zstd 的 CompressCertificate，以及支持 MLKEM768 混合密钥交换的 X25519。 此更新还提高了与 TLS 会话恢复、混合密钥重用和类似 Tor 流量的加密客户端问候的兼容性。 如果您发现新指纹有任何不匹配或问题，请告诉我。   由   提交/u/Affectionate_Type486   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojd7rf/surf_update_new_tls_fingerprints_for_firefox_144/</guid>
      <pubDate>Wed, 29 Oct 2025 18:56:11 GMT</pubDate>
    </item>
    <item>
      <title>教育基准：移动逻辑压缩 1 亿条记录（Python + SQLite + Zlib）</title>
      <link>https://www.reddit.com/r/programming/comments/1ojc99d/educational_benchmark_100_million_records_with/</link>
      <description><![CDATA[简介 这是一个关于 Python 如何通过应用逻辑和语义压缩来处理大量数据的教育性和探索性实验，我将这个概念称为 LSC（逻辑语义压缩）。 该提案是仅使用 Python、SQLite 和 Zlib 生成 1 亿条结构化记录并将它们存储在压缩块中 — 没有并行性，也没有高性能外部  ⚙️环境配置 设备：Android（通过 Termux） 语言：Python 3 数据库：SQLite 压缩：zlib 模式：单核 总记录数：100,000,000 批次：每个 1,000 条记录chunk 定期提交：每 3 个块  🧩 逻辑结构 生成的每条记录都遵循简单的语义模式： { &quot;id&quot;: i, &quot;title&quot;: f&quot;Book {i}&quot;, &quot;author&quot;: &quot;random letter string&quot;, &quot;year&quot;: number Between 1950 年和 2024 年，“类别”：“浪漫/科学/历史” } 这些记录被分组为块，在存储到数据库之前，它们被转换为 JSON 并使用 zlib 进行压缩。每个块代表一个“逻辑包”——LSC 中的一个中心概念。  ⚙️ 代码主要摘录 json_bytes = json.dumps(batch, seperators=(&#39;,&#39;, &#39;:&#39;)).encode() comp_blob = zlib.compress(json_bytes, ZLIB_LEVEL) cur.execute( &quot;INSERT INTO chunks (start_id, end_id, blob, count) VALUES (?, ?, ?, ?)&quot;, (i - BATCH_SIZE + 1, i, sqlite3.Binary(comp_blob), len(batch)) ) 代码执行：  记录的语义生成 JSON序列化 逻辑压缩（Zlib） 写入 SQLite   🚀 基准结果 结果指标 📊 生成 100,000,000 条记录 🧩 处理 100,000 条数据块 📦压缩后的大小 ~2 GB 📤 未压缩的大小 ~10 GB ⚙️ 压缩率 ~20% ⏱️ 总时间 ~50 秒（约） ⚡ 平均速度 ~200,000 条记录/秒 🔸 单核模式（CPU 密集）  🔬 观察结果 即使是在智能手机上运行，结果也出奇的稳定。压缩率保持在 20% 左右，块之间的差异很小。 这表明，有了良好的逻辑数据结构，无需借助 C/C++ 中的并行性或优化，就可以获得相当高的效率。  🧠 关于 LSC LSC（逻辑语义压缩）不是一个库，而是一个想法：  根据逻辑结构压缩数据和语义重复，而不仅仅是在原始字节中。  因此，每个块不仅承载信息，还承载记录之间的关系和连贯性。压缩成为数据含义的反映，而不仅仅是其大小。  🎓 结论 即使在单核模式下运行并使用简单的配置，Python 也表明可以处理 1 亿条结构化记录，保持一致的压缩和低碎片。  🔍 这个实验强化了这样的想法：数据的逻辑组织可以像技术优化一样强大。    由   提交/u/MajorPistola   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojc99d/educational_benchmark_100_million_records_with/</guid>
      <pubDate>Wed, 29 Oct 2025 18:20:23 GMT</pubDate>
    </item>
    <item>
      <title>Vi /Vim 编辑器：每个开发人员、系统管理员和 DevOps 工程师都应该知道的实用命令。</title>
      <link>https://www.reddit.com/r/programming/comments/1ojbu0m/vi_vim_editor_practical_commands_every_developer/</link>
      <description><![CDATA[我整理了一份 vi 命令的简单指南，这些年来在 Linux 上编辑配置或脚本时，这些指南实际上对我很有帮助。 简短、实用且专注于真实示例。 如果我遗漏了一些内容，请告诉我......很乐意接受反馈并使其成为详尽的列表！ 在此处阅读   由   提交/u/sshetty03  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojbu0m/vi_vim_editor_practical_commands_every_developer/</guid>
      <pubDate>Wed, 29 Oct 2025 18:04:39 GMT</pubDate>
    </item>
    <item>
      <title>我们如何持续交付软件</title>
      <link>https://www.reddit.com/r/programming/comments/1ojbos8/how_we_continually_deliver_software/</link>
      <description><![CDATA[ 由   提交/u/paltman94  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojbos8/how_we_continually_deliver_software/</guid>
      <pubDate>Wed, 29 Oct 2025 17:59:37 GMT</pubDate>
    </item>
    <item>
      <title>蔚蓝下来</title>
      <link>https://www.reddit.com/r/programming/comments/1ojbiss/azure_down/</link>
      <description><![CDATA[ 由   提交/u/RR_2025  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojbiss/azure_down/</guid>
      <pubDate>Wed, 29 Oct 2025 17:53:28 GMT</pubDate>
    </item>
    <item>
      <title>通过批量压缩击败神经网络：comma.ai 矢量量化挑战赛的结果提高了 3.50 倍</title>
      <link>https://www.reddit.com/r/programming/comments/1ojaus4/beating_neural_networks_with_batch_compression_a/</link>
      <description><![CDATA[ 由   提交 /u/Unusual_Midnight_523   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojaus4/beating_neural_networks_with_batch_compression_a/</guid>
      <pubDate>Wed, 29 Oct 2025 17:29:25 GMT</pubDate>
    </item>
    <item>
      <title>让我们在特定的浏览器配置文件中打开 URL</title>
      <link>https://www.reddit.com/r/programming/comments/1ojagkh/let_us_open_urls_in_a_specific_browser_profile/</link>
      <description><![CDATA[ 由   提交 /u/ekrubnivek   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ojagkh/let_us_open_urls_in_a_specific_browser_profile/</guid>
      <pubDate>Wed, 29 Oct 2025 17:15:06 GMT</pubDate>
    </item>
    <item>
      <title>Composer：用 RL·Cursor 构建快速前沿模型</title>
      <link>https://www.reddit.com/r/programming/comments/1oja9vo/composer_building_a_fast_frontier_model_with_rl/</link>
      <description><![CDATA[ 由   提交/u/Complex_Computer2966   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oja9vo/composer_building_a_fast_frontier_model_with_rl/</guid>
      <pubDate>Wed, 29 Oct 2025 17:08:15 GMT</pubDate>
    </item>
    <item>
      <title>“The Bug Hunt”博客文章模式</title>
      <link>https://www.reddit.com/r/programming/comments/1oj9dkh/the_bug_hunt_blog_post_pattern/</link>
      <description><![CDATA[这是《为开发人员写作：值得阅读的博客》一书的第 8 章。 （曼宁出版）。这里有一个不断增长的“Bug Hunt”博客文章集 https://writethat.blog/?pattern=bug%20hunt    由   提交/u/swdevtest  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oj9dkh/the_bug_hunt_blog_post_pattern/</guid>
      <pubDate>Wed, 29 Oct 2025 16:35:13 GMT</pubDate>
    </item>
    <item>
      <title>从 VS Code 到 Helix</title>
      <link>https://www.reddit.com/r/programming/comments/1oj7xhq/from_vs_code_to_helix/</link>
      <description><![CDATA[ 由   提交/u/Leading-Youth6865   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oj7xhq/from_vs_code_to_helix/</guid>
      <pubDate>Wed, 29 Oct 2025 15:41:40 GMT</pubDate>
    </item>
    <item>
      <title>我们为何以及如何更换 EBS</title>
      <link>https://www.reddit.com/r/programming/comments/1oj7tmt/why_and_how_we_are_replacing_ebs/</link>
      <description><![CDATA[ 由   提交/u/jascha_eng  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oj7tmt/why_and_how_we_are_replacing_ebs/</guid>
      <pubDate>Wed, 29 Oct 2025 15:37:42 GMT</pubDate>
    </item>
    <item>
      <title>Kafka 很快——我会使用 Postgres</title>
      <link>https://www.reddit.com/r/programming/comments/1oj7q6q/kafka_is_fast_ill_use_postgres/</link>
      <description><![CDATA[ 由   提交/u/arshidwahga  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oj7q6q/kafka_is_fast_ill_use_postgres/</guid>
      <pubDate>Wed, 29 Oct 2025 15:34:06 GMT</pubDate>
    </item>
    <item>
      <title>连接就是一切 • 肯·休斯 • GOTO 2025</title>
      <link>https://www.reddit.com/r/programming/comments/1oj47gc/connection_is_everything_ken_hughes_goto_2025/</link>
      <description><![CDATA[ 由   提交 /u/goto-con   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oj47gc/connection_is_everything_ken_hughes_goto_2025/</guid>
      <pubDate>Wed, 29 Oct 2025 13:14:36 GMT</pubDate>
    </item>
    </channel>
</rss>