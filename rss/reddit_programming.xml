<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 29 Oct 2025 09:26:33 GMT</lastBuildDate>
    <item>
      <title>有效构建多智能体人工智能系统</title>
      <link>https://www.reddit.com/r/programming/comments/1oiypfv/structuring_multiagent_ai_systems_efficiently/</link>
      <description><![CDATA[我正在试验人工智能代理，它必须跨多个消息应用程序工作，同时记住上下文。使用 Photon，我可以使用更少的样板快速构建原型。 您通常如何构建多代理人工智能系统，使其模块化、可维护且具有内存感知能力？有推荐的模式或框架吗？   由   提交/u/Fearless-Confusion-4   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oiypfv/structuring_multiagent_ai_systems_efficiently/</guid>
      <pubDate>Wed, 29 Oct 2025 08:08:36 GMT</pubDate>
    </item>
    <item>
      <title>如何在 Java 中高效地创建对象副本而不需要从头开始重建它们？</title>
      <link>https://www.reddit.com/r/programming/comments/1oiyaj1/how_to_create_object_copies_efficiently_in_java/</link>
      <description><![CDATA[让我们看一下关于Java 原型设计模式的初学者友好指南：当您需要通过克隆现有对象而不是从头开始构建新对象时，这是最实用的创建模式之一。 本文涵盖：  原型设计模式是什么（用简单的英语） 浅复制与深复制 - 用视觉效果进行解释 现代 Java 21 代码示例（没有过时的 Cloneable 混乱） UML 图和示例用于更好理解的序列图 常见面试问题和常见问题解答  如果您正在准备 Java 面试、学习设计模式，或者只是想提高 Java 设计技能，这将会有很大帮助。  在此处阅读全文：Java 中的原型设计模式及其示例   由   提交/u/erdsingh24  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oiyaj1/how_to_create_object_copies_efficiently_in_java/</guid>
      <pubDate>Wed, 29 Oct 2025 07:39:59 GMT</pubDate>
    </item>
    <item>
      <title>🧠 探索编码挑战平台——哪些平台能够真正帮助您成长为开发人员？</title>
      <link>https://www.reddit.com/r/programming/comments/1oixvcn/exploring_coding_challenge_platforms_which_ones/</link>
      <description><![CDATA[大家好， 在过去的几周里，我一直在探索各种编码挑战平台，以了解它们的不同之处 - 不仅在问题集上，而且还了解它们如何影响开发人员真正的技能成长。 有些侧重于面试式的 DSA 问题，另一些则强调语言掌握或竞争性编程，有一些甚至鼓励协作和讨论。 我整理了一篇简短的文章，总结了我在流行平台（从 LeetCode 到 Codeforces、HackerRank 等）中发现有用（和不太有用）的内容。在这里分享，以防有人有兴趣比较经验或添加我错过的平台： 🔗 最佳编码挑战平台：LeetCode、HackerRank 和更多 我很好奇 - 对于那些积极使用挑战网站的人来说， 👉 您认为哪个平台提供了最佳的长期学习价值？ 👉 哪些平台被高估或只是“陷阱”？ 很想听听您的想法 - 特别是来自那些指导初级人员或招聘经常使用这些平台的开发人员的想法。   由   提交/u/sagarnikam123  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oixvcn/exploring_coding_challenge_platforms_which_ones/</guid>
      <pubDate>Wed, 29 Oct 2025 07:10:47 GMT</pubDate>
    </item>
    <item>
      <title>初看Java Valhalla：值对象的扁平化和内存对齐</title>
      <link>https://www.reddit.com/r/programming/comments/1oix17s/first_look_at_java_valhalla_flattening_and_memory/</link>
      <description><![CDATA[ 由   提交 /u/joemwangi   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oix17s/first_look_at_java_valhalla_flattening_and_memory/</guid>
      <pubDate>Wed, 29 Oct 2025 06:14:10 GMT</pubDate>
    </item>
    <item>
      <title>我需要帮助才能真正学习</title>
      <link>https://www.reddit.com/r/programming/comments/1oiwjtw/i_need_help_to_really_learn/</link>
      <description><![CDATA[大家好， 我正在攻读 Web 应用程序开发 (DAW) 的更高学位。这是我第一次听到“编程”这个词。在我的生活中。 我使用人工智能作为学习的老师，但最近，我觉得我并没有真正在学习，只是遵循它告诉我的内容。 关于如何真正学习有什么建议吗？   由   提交/u/OriginalNeneBabi   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oiwjtw/i_need_help_to_really_learn/</guid>
      <pubDate>Wed, 29 Oct 2025 05:43:12 GMT</pubDate>
    </item>
    <item>
      <title>Stephen Colebourne 的新 Java 最佳实践</title>
      <link>https://www.reddit.com/r/programming/comments/1oitmh6/the_new_java_best_practices_by_stephen_colebourne/</link>
      <description><![CDATA[ 由   提交/u/BlueGoliath  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oitmh6/the_new_java_best_practices_by_stephen_colebourne/</guid>
      <pubDate>Wed, 29 Oct 2025 03:00:05 GMT</pubDate>
    </item>
    <item>
      <title>OSMEA – 用于可扩展电子商务应用程序的开源 Flutter 架构</title>
      <link>https://www.reddit.com/r/programming/comments/1oipdzh/osmea_open_source_flutter_architecture_for/</link>
      <description><![CDATA[大家好👋 我们刚刚发布了OSMEA（开源移动电子商务架构） - 一个完整的基于 Flutter 的生态系统，用于构建现代、可扩展的电子商务应用程序。  与典型的框架或模板不同，OSMEA 为您提供完全模块化的基础 - 拥有自己的 UI 套件、API 集成（Shopify、WooCommerce） 以及专为生产构建的核心包。   💡亮点 🧱 模块化和模块化可组合 — 只构建您需要的内容 🎨 自定义 UI 套件 — 50 多个可重用组件 🔥 平台无关 — 可与 Shopify、WooCommerce 或自定义 API 配合使用 🚀 生产就绪 — CI/CD、测试覆盖率、异步安全架构 📱 跨平台 - iOS、Android、Web 和桌面  🧠 它不仅仅是一个框架 - 它是一个生态系统。  您可以在此处查看存储库并尝试现场演示 👇 🔗 github.com/masterfabric-mobile/osmea  希望得到您的想法、反馈，甚至贡献🙌我们特别好奇您对 Flutter 中的模块化架构模式的看法。   由   提交 /u/engineer_nurlife   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oipdzh/osmea_open_source_flutter_architecture_for/</guid>
      <pubDate>Tue, 28 Oct 2025 23:44:28 GMT</pubDate>
    </item>
    <item>
      <title>感谢 Python 软件基金会。我刚刚进行了第一笔捐款</title>
      <link>https://www.reddit.com/r/programming/comments/1oip7cw/kudos_to_python_software_foundation_i_just_made/</link>
      <description><![CDATA[ 由   提交/u/elgringo  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oip7cw/kudos_to_python_software_foundation_i_just_made/</guid>
      <pubDate>Tue, 28 Oct 2025 23:36:33 GMT</pubDate>
    </item>
    <item>
      <title>了解 Docker 内部结构：用 Python 构建容器运行时</title>
      <link>https://www.reddit.com/r/programming/comments/1oiliw9/understanding_docker_internals_building_a/</link>
      <description><![CDATA[ 由   提交/u/mraza007  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oiliw9/understanding_docker_internals_building_a/</guid>
      <pubDate>Tue, 28 Oct 2025 21:07:57 GMT</pubDate>
    </item>
    <item>
      <title>高级代理事务</title>
      <link>https://www.reddit.com/r/programming/comments/1oii7ab/high_agency_matters/</link>
      <description><![CDATA[ 由   提交/u/feross  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oii7ab/high_agency_matters/</guid>
      <pubDate>Tue, 28 Oct 2025 19:01:41 GMT</pubDate>
    </item>
    <item>
      <title>“振动验证”算法带来的惊喜</title>
      <link>https://www.reddit.com/r/programming/comments/1oihhbi/surprises_from_vibe_validating_an_algorithm/</link>
      <description><![CDATA[“形式验证”正在创建一个数学证明，证明程序可以实现您想要的功能。这是出了名的困难和昂贵。 （如果它简单且便宜，我们也许可以用来验证一些人工智能生成的代码。） 上个月，我使用 ChatGPT-5 和 Codex（以及 Claude Sonnet 4.5）来验证 Rust 库中的（手写）算法。人工智能工具生成了证据，并由名为 Lean 的校对人员进行了检查。链接到下面的完整详细信息，但令我惊讶的是：  它有效。在人工智能的帮助下，在不了解精益形式方法的情况下，我验证了精益中的数据结构算法。 项目进行到一半时，Codex 和 Claude Sonnet 4.5 相继发布。我可以感受到这些版本的智力飞跃。 开始这个项目时，我无法阅读精益，但在人工智能的帮助下，我学到了足够的知识来审核证明的关键顶层。事实证明，阅读水平的掌握就是我所需要的。 证据是巨大的，大​​约 4,700 行 Lean 只用了 50 行 Rust。两年前，Divyanshu Ranjan 和我用 357 行 Dafny 验证了相同的算法。 然而，与依赖于随机 SMT 搜索的 Dafny 不同，Lean 构建了明确的逐步证明。 Dafny 可能会将某些内容标记为已证明，但相同的验证可能在另一次运行中失败。当精益证明某件事时，它就会一直被证明。 （任一工具的失败并不意味着该命题是错误的 - 只是当时无法验证它。） AI 试图愚弄我两次，一次是通过 set_option 隐藏抱歉，另一次是提出公理而不是证明。 验证过程比我预期的工作量更大，成本更高。这需要几周的兼职工作和大约 50 美元的人工智能积分。 这个过程仍然容易出错。如果我未能正确审核算法对精益的翻译，最终可能会证明是错误的。幸运的是，有两个项目已经在解决这个翻译问题：针对 Coq 的 coq-of-rust 和针对 Lean 的 Aeneas。这些最终可能会消除手动或人工智能辅助移植的需要。之后，我们只需要人工智能自己编写经过精益验证的证明，这看起来不仅是可能的，而且是实用的。 元提示效果很好。就我而言，我元提示了基于浏览器的 ChatGPT-5。也就是说，我要求它为 AI 编码代理 Claude 和 Codex 编写提示。由于当前人工智能定价的怪癖，这种方法也有助于降低成本。 所得的证明几乎肯定是不必要的冗长。我很乐意为精益算法验证库做出贡献，但我担心这些 Vibe 风格的证明过于草率且一次性，无法作为未来证明的构建块。  要点 Vibe 验证仍然是一头跳舞的猪。令人惊奇的不是它跳舞有多优雅，而是它真的在跳舞。不过我很乐观。长期以来，传统观点认为算法的形式验证太难且成本太高，不值得。但有了精益和人工智能代理等工具，成本和工作量都在快速下降。我相信形式验证将在未来的软件开发中发挥更大的作用。 使用 Lean、ChatGPT-5 和 Vibe 进行 Vibe 验证克劳德 4.5   由   提交 /u/carlk22   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oihhbi/surprises_from_vibe_validating_an_algorithm/</guid>
      <pubDate>Tue, 28 Oct 2025 18:34:23 GMT</pubDate>
    </item>
    <item>
      <title>打字俱乐部 - 通过搏击俱乐部的视角了解打字</title>
      <link>https://www.reddit.com/r/programming/comments/1oiertg/type_club_understanding_typing_through_the_lens/</link>
      <description><![CDATA[ 由   提交/u/AltruisticPrimary34  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oiertg/type_club_understanding_typing_through_the_lens/</guid>
      <pubDate>Tue, 28 Oct 2025 16:54:05 GMT</pubDate>
    </item>
    <item>
      <title>ArkRegex 简介：用类型替换 new RegExp()</title>
      <link>https://www.reddit.com/r/programming/comments/1oie1nq/introducing_arkregex_a_drop_in_replacement_for/</link>
      <description><![CDATA[ 由   提交 /u/ssalbdivad   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oie1nq/introducing_arkregex_a_drop_in_replacement_for/</guid>
      <pubDate>Tue, 28 Oct 2025 16:27:26 GMT</pubDate>
    </item>
    <item>
      <title>Patreon 扩展现场活动的经验教训：流量建模、性能调整和团队协调</title>
      <link>https://www.reddit.com/r/programming/comments/1oicq3e/lessons_from_scaling_live_events_at_patreon/</link>
      <description><![CDATA[在 Patreon，我们最近扩展了我们的平台，可以同时处理数万名粉丝参加现场活动。通过对真实用户到达情况进行建模、调整性能以及跨团队协调，我们将 Web 加载时间缩短了 57%，并将 iOS 启动请求减少了一半。 以下是我们的做法以及我们在突发负载下扩展实时系统方面学到的知识： https://www.patreon.com/posts/from-thundering-141679975 您从扩展您工作过的平台中学到了哪些令人惊讶的经验教训？   由   提交/u/patreon-eng   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oicq3e/lessons_from_scaling_live_events_at_patreon/</guid>
      <pubDate>Tue, 28 Oct 2025 15:38:55 GMT</pubDate>
    </item>
    <item>
      <title>在生产中调试 LLM 应用程序比预期更难</title>
      <link>https://www.reddit.com/r/programming/comments/1oia68m/debugging_llm_apps_in_production_was_harder_than/</link>
      <description><![CDATA[我一直在运行一个带有 RAG 检索、代理链和工具调用的 AI 应用程序。最近，一些用户开始报告响应速度缓慢，并且偶尔会出现错误的答案。 问题是我无法判断哪个部分损坏了。矢量搜索？提示？代币限制？基本上是在各处添加打印语句，并希望在日志中显示一些内容。 APM 工具为我提供了 API 延迟和错误率，但对于我需要的 LLM 内容：  从矢量数据库检索哪些文档 预处理后的实际提示 令牌使用细分 瓶颈在链中的位置  我的解决方案： 设置 Langfuse（开源、自托管）。使用 Postgres、Clickhouse、Redis 和 S3。 Web 和工作容器。 observe() 装饰器跟踪管道。显示：  完整请求流程 模板化后提示 检索上下文 每个请求的令牌使用 逐步延迟  部署 最初使用其 Docker Compose 设置。对于较小的规模效果很好。他们有 Kubernetes 扩展指南。 文档 网关设置 添加 AnannasAI 作为 LLM 网关。具有自动故障转移功能的多个提供商的单一 API。在混合不同模型源时对于混合设置很有用。 Anannas 处理网关指标，Langfuse 处理应用程序跟踪。提供跨两个层的可见性。 实现文档 捕获了什么 矢量搜索返回错误块 - 嵌入缓存无法正常工作。跟踪显示了实际检索到的内容，以便我可以看到问题。 一些提示达到了上下文限制并被截断。解释了奇怪的输出。 Stack  Langfuse（Docker，自托管） Anannas AI（网关） Redis、Postgres、Clickhouse  跟踪数据由于是自托管而保留在本地。 如果有人第一次调试类似的 LLM 问题，可能会有用。   由   提交/u/Silent_Employment966   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oia68m/debugging_llm_apps_in_production_was_harder_than/</guid>
      <pubDate>Tue, 28 Oct 2025 14:00:56 GMT</pubDate>
    </item>
    </channel>
</rss>