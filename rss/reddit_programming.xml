<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sat, 18 Oct 2025 06:33:17 GMT</lastBuildDate>
    <item>
      <title>Andrej Karpathy 对人工智能辅助编码的想法</title>
      <link>https://www.reddit.com/r/programming/comments/1o9lpro/andrej_karpathys_thoughts_on_ai_assisted_coding/</link>
      <description><![CDATA[ 由   提交/u/Scary-Subject-1948   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o9lpro/andrej_karpathys_thoughts_on_ai_assisted_coding/</guid>
      <pubDate>Sat, 18 Oct 2025 03:47:40 GMT</pubDate>
    </item>
    <item>
      <title>用约 500 行 C++ 代码构建轻量级 ImGui 分析器</title>
      <link>https://www.reddit.com/r/programming/comments/1o9h0j0/building_a_lightweight_imgui_profiler_in_500/</link>
      <description><![CDATA[ 由   提交/u/SuperV1234  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o9h0j0/building_a_lightweight_imgui_profiler_in_500/</guid>
      <pubDate>Fri, 17 Oct 2025 23:50:47 GMT</pubDate>
    </item>
    <item>
      <title>Vibe 编码的兴衰：AI Slop 的现实</title>
      <link>https://www.reddit.com/r/programming/comments/1o9gxj3/the_rise_and_fall_of_vibe_coding_the_reality_of/</link>
      <description><![CDATA[ 由   提交/u/BlueGoliath  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o9gxj3/the_rise_and_fall_of_vibe_coding_the_reality_of/</guid>
      <pubDate>Fri, 17 Oct 2025 23:46:55 GMT</pubDate>
    </item>
    <item>
      <title>这是我咨询生涯中的一个金融科技项目的详细分解。</title>
      <link>https://www.reddit.com/r/programming/comments/1o9gfry/this_is_a_detailed_breakdown_of_a_fintech_project/</link>
      <description><![CDATA[ 由   提交/u/trolleid   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o9gfry/this_is_a_detailed_breakdown_of_a_fintech_project/</guid>
      <pubDate>Fri, 17 Oct 2025 23:24:04 GMT</pubDate>
    </item>
    <item>
      <title>Gemini 很生气，但我的开发人员后来感谢了我</title>
      <link>https://www.reddit.com/r/programming/comments/1o9e4up/gemini_got_annoyed_but_my_developers_thanked_me/</link>
      <description><![CDATA[是的，我成功惹恼了双子座。但我的开发人员为此感谢我。原因如下。  在我最近的项目中，我已经从纯粹的工程角色转变为更加以产品为中心的角色。这种变化迫使我寻找新的工作方式。我们正在构建一个新的人工智能工具，即让一系列深度代理在后台持续运行，并分析新法规对金融服务机构、制药、电信等公司的影响……挑战是什么？甚至不存在这样的用户界面。  作为一名工程师，我知道在实践中感觉错误的想法上花费两周冲刺的痛苦。现在，与更加以产品为中心的角色一样，我不能要求我的团队构建我尚未验证的东西。快速实验至关重要。  我发现了一个作弊代码：AI-powered prototyping with Gemini Canvas。  - 原始想法：“我需要一个 UI 来监控深度代理。显示 72 小时任务的状态、进度和结果。&#39; - 分钟内的结果：可点击的原型。我立即发现卡片布局很混乱。 - 迭代：“实际上，让我们尝试使用卡片视图来处理长时间运行的任务，而不是时间轴视图” - 2 分钟内的结果：一个全新的、可测试的版本。  这与人工智能编写生产代码无关。这是关于人工智能帮助我们回答最重要的问题：“这是否是构建正确的东西？”......在编写一行生产代码之前。  在我的新 Medium 文章中，我分享了这个新的工作流程如何让构思新颖的 UI 变得像游戏一样，并将我的团队从沮丧的世界中拯救出来。  您对全新界面的 AI 原型设计工具有何体验？ Gemini 很恼火，但我的开发人员后来感谢了我 |作者：乔治·卡拉佩蒂安 | 2025 年 10 月 |中   由   提交/u/AnythingNo920   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o9e4up/gemini_got_annoyed_but_my_developers_thanked_me/</guid>
      <pubDate>Fri, 17 Oct 2025 21:42:42 GMT</pubDate>
    </item>
    <item>
      <title>同一文档视图转换已成为基线 新推出</title>
      <link>https://www.reddit.com/r/programming/comments/1o9bf34/samedocument_view_transitions_have_become/</link>
      <description><![CDATA[ 由   提交/u/feross  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o9bf34/samedocument_view_transitions_have_become/</guid>
      <pubDate>Fri, 17 Oct 2025 19:55:14 GMT</pubDate>
    </item>
    <item>
      <title>AI QA 工程师，智能 QA 测试的兴起，许多接近它的新模型。</title>
      <link>https://www.reddit.com/r/programming/comments/1o972ie/ai_qa_engineer_the_rise_of_intelligent_qa_testing/</link>
      <description><![CDATA[ 由   提交/u/cheerfulboy  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o972ie/ai_qa_engineer_the_rise_of_intelligent_qa_testing/</guid>
      <pubDate>Fri, 17 Oct 2025 17:08:23 GMT</pubDate>
    </item>
    <item>
      <title>从 AWS 迁移到 Hetzner</title>
      <link>https://www.reddit.com/r/programming/comments/1o970qc/migrating_from_aws_to_hetzner/</link>
      <description><![CDATA[ 由   提交/u/cheerfulboy  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o970qc/migrating_from_aws_to_hetzner/</guid>
      <pubDate>Fri, 17 Oct 2025 17:06:34 GMT</pubDate>
    </item>
    <item>
      <title>构建 AI 系统让我对 Rust 的欣赏超出了我的预期</title>
      <link>https://www.reddit.com/r/programming/comments/1o93nui/building_ai_systems_made_me_appreciate_rust_more/</link>
      <description><![CDATA[在使用 Python 构建 AI 工作流程多年后，我开始遇到困难，太多的异步边缘情况、上下文切换和负载下的随机死锁。 我开始尝试使用 Rust 来进行编排层。 可预测性和并发安全性之间的差异是日夜不停的。 现在我无法停止思考： 为什么我们在 AI 工具中仍然将可靠性视为可选？ 我们永远不会构建“有时有效”的数据库，但我们接受它作为代理。 这里有人之前将 Rust + Python 组合用于生产 AI 吗？很想听听哪种模式最适合您。   由   提交/u/imrul009  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o93nui/building_ai_systems_made_me_appreciate_rust_more/</guid>
      <pubDate>Fri, 17 Oct 2025 15:00:22 GMT</pubDate>
    </item>
    <item>
      <title>没有私有的封装：基于接口的设计案例</title>
      <link>https://www.reddit.com/r/programming/comments/1o934q9/encapsulation_without_private_a_case_for/</link>
      <description><![CDATA[ 由   提交 /u/EgregorAmeriki   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o934q9/encapsulation_without_private_a_case_for/</guid>
      <pubDate>Fri, 17 Oct 2025 14:40:16 GMT</pubDate>
    </item>
    <item>
      <title>这些 Python 类型提示用法太复杂，不值得</title>
      <link>https://www.reddit.com/r/programming/comments/1o90z39/these_python_type_hints_usage_are_too_complicated/</link>
      <description><![CDATA[ 由   提交/u/wyhjsbyb   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o90z39/these_python_type_hints_usage_are_too_complicated/</guid>
      <pubDate>Fri, 17 Oct 2025 13:13:13 GMT</pubDate>
    </item>
    <item>
      <title>龙虾社区访谈，内容涉及编程、数学、干扰、时间管理和娱乐计算</title>
      <link>https://www.reddit.com/r/programming/comments/1o8ze7r/lobsters_community_interview_about_programming/</link>
      <description><![CDATA[ 由   提交/u/fpcoder  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o8ze7r/lobsters_community_interview_about_programming/</guid>
      <pubDate>Fri, 17 Oct 2025 12:01:52 GMT</pubDate>
    </item>
    <item>
      <title>随处可用的对话框 – 处理超时</title>
      <link>https://www.reddit.com/r/programming/comments/1o8z31v/dialogs_that_work_everywhere_dealing_with_the/</link>
      <description><![CDATA[Miniterface 是一个工具包，它使对话框可以在任何地方工作，无论是桌面、终端还是浏览器应用程序。 最近，我添加了一个超时功能，可以在几个小时内自动确认对话框 秒。 由于库保证对话框在任何地方都以相同的方式工作，这在技术上具有挑战性，请查看每个界面使用的技术。 GUI (tkinter) 我担心这将是最具挑战性的，但事实恰恰相反！只需调用倒计时方法，同时将时间减少到零即可。 在该方法中，我们使用 tkinter after 设置另一个超时 self.after_id = self.adaptor.after(1000, self.countdown, count - 1) 并更改了按钮文本 self.button.config(text=f&quot;{self.orig} ({count})”)。当倒计时结束时，我们通过 self.button.invoke() 单击按钮。 当用户对按钮散焦时，我们停止倒计时。 self.button.bind(&quot;&quot;, lambda e: self.cancel() if e.widget.focus_get() else 无） 你看到focus_get了吗？这是为了确保应用程序中的另一个小部件已获得焦点，我们不想停止通过 Alt+tab 更改窗口焦点的倒计时。 https://github.com/CZ-NIC/mininterface/blob/main/mininterface/_tk_interface/timeout.py TUI （文本） TUI 界面是通过 textual 框架实现的。 在 init 时，我们创建一个异步任务 asyncio.create_task(self.countdown(timeout))，其中只有一个 while 循环。这里的 self.countdown 方法只被调用一次。  while count &gt; 0: 等待 asyncio.sleep(1) count -= 1 self.button.label = f&quot;{self.orig} ({count})&quot;  一旦while结束，我们就通过self.button.press()调用按钮（这里，调用称为“press”）。 https://github.com/CZ-NIC/mininterface/blob/main/mininterface/_textual_interface/timeout.py  文本 接口 后备文本接口仅使用内置的input()。令人惊讶的是，在这里实现倒计时是最具挑战性的任务。由于我们需要停止按键计数（就像其他 UI 一样），因此我们不能使用正常的 input 而是使用 select 或 msvcrt 包（取决于 Linux/Win 平台）。 计数是通过线程实现的，我们每秒打印一个点。仅当 input_started 为 false、没有按下任何键时才打印。  if not input_started.is_set(): print(&quot;.&quot;, end=&#39;&#39;,lush=True)  代码最长： https://github.com/CZ-NIC/mininterface/blob/main/mininterface/_text_interface/timeout.py 结论 现在，程序员可以在每个平台、终端、浏览器上使用超时功能，而无需实际处理内部实现 - 线程、异步或主循环。 这段代码可以在任何地方运行：  from mininterface import run m = run() print(m.confirm(&quot;Is that 好吧？”), timeout=10) # True/False    由   提交 /u/the-e2rd   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o8z31v/dialogs_that_work_everywhere_dealing_with_the/</guid>
      <pubDate>Fri, 17 Oct 2025 11:46:09 GMT</pubDate>
    </item>
    <item>
      <title>Nival向公众发布了《闪电战2》的源代码</title>
      <link>https://www.reddit.com/r/programming/comments/1o8ylmx/nival_has_released_the_source_code_for_blitzkrieg/</link>
      <description><![CDATA[ 由   提交/u/r_retrohacking_mod2   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o8ylmx/nival_has_released_the_source_code_for_blitzkrieg/</guid>
      <pubDate>Fri, 17 Oct 2025 11:20:40 GMT</pubDate>
    </item>
    <item>
      <title>AI应用程序开发的新时代：Apple破解LLM和AI集成</title>
      <link>https://www.reddit.com/r/programming/comments/1o8xn8e/a_new_era_of_ai_app_development_apple_cracked_llm/</link>
      <description><![CDATA[ 由   提交/u/derjanni   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1o8xn8e/a_new_era_of_ai_app_development_apple_cracked_llm/</guid>
      <pubDate>Fri, 17 Oct 2025 10:26:10 GMT</pubDate>
    </item>
    </channel>
</rss>