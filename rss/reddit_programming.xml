<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Tue, 28 Oct 2025 15:28:58 GMT</lastBuildDate>
    <item>
      <title>分析 - AI 代理作为员工</title>
      <link>https://www.reddit.com/r/programming/comments/1oibzi9/analysis_ai_agents_as_employees/</link>
      <description><![CDATA[“人工智能代理作为员工”论文：  承诺可解释性，承认黑匣子 称他们为队友，承认他们无法回报 提出与非代理的社会契约 57页，100字关于身份管理  当责任随之而来时，文字很重要。   由   提交/u/syntheticauth   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oibzi9/analysis_ai_agents_as_employees/</guid>
      <pubDate>Tue, 28 Oct 2025 15:10:51 GMT</pubDate>
    </item>
    <item>
      <title>在生产中调试 LLM 应用程序比预期更难</title>
      <link>https://www.reddit.com/r/programming/comments/1oia68m/debugging_llm_apps_in_production_was_harder_than/</link>
      <description><![CDATA[我一直在运行一个带有 RAG 检索、代理链和工具调用的 AI 应用程序。最近，一些用户开始报告响应速度缓慢，并且偶尔会出现错误的答案。 问题是我无法判断哪个部分损坏了。矢量搜索？提示？代币限制？基本上是在各处添加打印语句，并希望在日志中显示一些内容。 APM 工具为我提供 API 延迟和错误率，但对于我需要的 LLM 内容：  从矢量数据库检索哪些文档 预处理后的实际提示 令牌使用细分 瓶颈在哪里 chain  我的解决方案： 设置 Langfuse（开源、自托管）。使用 Postgres、Clickhouse、Redis 和 S3。 Web 和工作容器。 observe() 装饰器跟踪管道。显示：  完整请求流程 模板化后提示 检索上下文 每个请求的令牌使用 逐步延迟  部署 最初使用其 Docker Compose 设置。对于较小的规模效果很好。他们有 Kubernetes 扩展指南。 文档 网关设置 添加 AnannasAI 作为 LLM 网关。具有自动故障转移功能的多个提供商的单一 API。在混合不同模型源时对于混合设置很有用。 Anannas 处理网关指标，Langfuse 处理应用程序跟踪。提供跨两个层的可见性。 实现文档 捕获了什么 矢量搜索返回错误块 - 嵌入缓存无法正常工作。跟踪显示了实际检索到的内容，以便我可以看到问题。 一些提示达到了上下文限制并被截断。解释了奇怪的输出。 Stack  Langfuse（Docker，自托管） Anannas AI（网关） Redis、Postgres、Clickhouse  跟踪数据由于是自托管而保留在本地。 如果有人正在调试类似的内容 对于第一次参加 LLM 问题，可能会有用。   由   提交/u/Silent_Employment966   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oia68m/debugging_llm_apps_in_production_was_harder_than/</guid>
      <pubDate>Tue, 28 Oct 2025 14:00:56 GMT</pubDate>
    </item>
    <item>
      <title>刚刚发表了一篇关于我认为振动编码和语音编码的发展方向的文章</title>
      <link>https://www.reddit.com/r/programming/comments/1oia1op/just_published_an_article_on_where_i_think_vibe/</link>
      <description><![CDATA[分享我写的一篇文章（主要是通过语音），内容涉及振动编码、语音输入和人工智能辅助编程的未来。很想听听别人的想法或经历。   由   提交 /u/mikaelainalem   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oia1op/just_published_an_article_on_where_i_think_vibe/</guid>
      <pubDate>Tue, 28 Oct 2025 13:55:57 GMT</pubDate>
    </item>
    <item>
      <title>波士顿的 Anthony 的 Armaaruss 检测：一种实时物体检测的新方法</title>
      <link>https://www.reddit.com/r/programming/comments/1oi9ak9/anthony_of_bostons_armaaruss_detection_a_novel/</link>
      <description><![CDATA[ 由   提交 /u/thedowcast   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi9ak9/anthony_of_bostons_armaaruss_detection_a_novel/</guid>
      <pubDate>Tue, 28 Oct 2025 13:25:41 GMT</pubDate>
    </item>
    <item>
      <title>更快的数据库查询：实用技术</title>
      <link>https://www.reddit.com/r/programming/comments/1oi99yw/faster_database_queries_practical_techniques/</link>
      <description><![CDATA[在 Medium 上发布了一篇新文章，如果您从事高可用性和高可用性方面的工作，请访问：可扩展的系统，您可能会发现它很有用   由   提交/u/Trust_Me_Bro_4sure  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi99yw/faster_database_queries_practical_techniques/</guid>
      <pubDate>Tue, 28 Oct 2025 13:25:01 GMT</pubDate>
    </item>
    <item>
      <title>LINElnw广播部署中心</title>
      <link>https://www.reddit.com/r/programming/comments/1oi92p9/linelnw_broadcast_deploy_center/</link>
      <description><![CDATA[ 由   提交 /u/Sufficient_Swim8926   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi92p9/linelnw_broadcast_deploy_center/</guid>
      <pubDate>Tue, 28 Oct 2025 13:16:18 GMT</pubDate>
    </item>
    <item>
      <title>如何可靠地转账 10 欧元</title>
      <link>https://www.reddit.com/r/programming/comments/1oi8ip1/how_to_transfer_10_eur_reliably/</link>
      <description><![CDATA[任务是通过 API 调用转账 10 欧元。这个问题在现实世界中一直都会出现。例如，当顾客在电商店购买商品时，后端需要进行支付并预订订单。通常这些操作分布在第三方服务提供商和内部数据库或几个第三方之间。 目标是在避免重复发布的同时完成操作。 TL;DR — 这是不可能的  这个看似常规的任务是一个分布式共识问题，没有通用的解决方案 我解释了如何解决以下问题的轻松版本： 问题    由   提交 /u/aka-rider   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi8ip1/how_to_transfer_10_eur_reliably/</guid>
      <pubDate>Tue, 28 Oct 2025 12:51:27 GMT</pubDate>
    </item>
    <item>
      <title>现场编码恍惚</title>
      <link>https://www.reddit.com/r/programming/comments/1oi8818/live_coding_trance/</link>
      <description><![CDATA[ 由   提交/u/DelilahsDarkThoughts   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi8818/live_coding_trance/</guid>
      <pubDate>Tue, 28 Oct 2025 12:38:24 GMT</pubDate>
    </item>
    <item>
      <title>edit-mind,使用 AI（对象检测、人脸识别、情感分析）索引视频的桌面应用程序,通过自然语言查询启用语义搜索并生成粗剪,下载edit-mind的源码_GitHub_帮酷</title>
      <link>https://www.reddit.com/r/programming/comments/1oi7ped/github_iliashadeditmind_desktop_app_that_indexes/</link>
      <description><![CDATA[ 由   提交 /u/IliasHad   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi7ped/github_iliashadeditmind_desktop_app_that_indexes/</guid>
      <pubDate>Tue, 28 Oct 2025 12:14:31 GMT</pubDate>
    </item>
    <item>
      <title>对于编程团队来说，敏捷到底是一个骗局还是陷阱？</title>
      <link>https://www.reddit.com/r/programming/comments/1oi797o/is_agile_a_total_scam_or_trap_for_the_programming/</link>
      <description><![CDATA[敏捷编程方法源于软件世界与商业世界的妥协。原则上，程序员喜欢在一个定义明确、计划周密的项目上工作，这正是瀑布式所需要的，但实际上，客户总是倾向于改变他们的需求，这使得瀑布式方法几乎不可能落地。因此，软件世界不再坚持需求变更的僵化。这就是敏捷方法论的用武之地。它提供了灵活性和对变化的适应，这基本上是对业务术语的完全投降。然而，这种理想的方法有一个前提，即客户或业务团队也愿意妥协他们的项目范围，即，即使他们的一些原始需求由于未来需求的变化而无法交付，他们也愿意签署项目。不幸的是，在许多情况下，客户对变更和全面交付都施加压力，这导致编程团队和成本超支。我们总是可以说额外的改变会耗尽计划的资源，但是我们经常发现我们在与客户谈判时处于弱势地位，并且很可能最终接受他们的主张。与瀑布相比，敏捷放弃了严格定义的需求和僵化的变更的第一道防线。这对我们来说不是一个骗局或陷阱吗？    由   提交 /u/DK_ZJJ0801   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi797o/is_agile_a_total_scam_or_trap_for_the_programming/</guid>
      <pubDate>Tue, 28 Oct 2025 11:52:45 GMT</pubDate>
    </item>
    <item>
      <title>想要更好的安全性吗？像攻击者一样进行测试</title>
      <link>https://www.reddit.com/r/programming/comments/1oi5uty/want_better_security_test_like_attackers_would/</link>
      <description><![CDATA[ 由   提交 /u/shift_devs   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi5uty/want_better_security_test_like_attackers_would/</guid>
      <pubDate>Tue, 28 Oct 2025 10:36:46 GMT</pubDate>
    </item>
    <item>
      <title>JSON Query - 一种小型、灵活且可扩展的 JSON 查询语言</title>
      <link>https://www.reddit.com/r/programming/comments/1oi5kjt/json_query_a_small_flexible_and_expandable_json/</link>
      <description><![CDATA[ 由   提交/u/BrewedDoritos  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi5kjt/json_query_a_small_flexible_and_expandable_json/</guid>
      <pubDate>Tue, 28 Oct 2025 10:19:55 GMT</pubDate>
    </item>
    <item>
      <title>如何使用 i18next 测试和替换任何缺失的翻译</title>
      <link>https://www.reddit.com/r/programming/comments/1oi5f42/how_to_test_and_replace_any_missing_translations/</link>
      <description><![CDATA[我最近在使用 i18next 时发现了一种非常实用的方法来检测和填充缺失的翻译，老实说，当您有数十个 JSON 文件需要维护时，它可以节省大量时间。 第 1 步 - 测试缺失的翻译 您现在可以自动检查本地化文件中是否缺少任何键。它适用于您的 CLI、CI/CD 管道，甚至您的 Jest/Vitest 测试套件。 示例： npx intlayer test:i18next 它会扫描您的代码库，将其与 JSON 文件进行比较，并输出哪些密钥丢失或未使用。在部署或合并 PR 之前非常方便。 第 2 步 - 自动填充缺失的翻译 您可以选择 AI 提供商（ChatGPT、Claude、DeepSeek 或 Mistral）并使用您自己的 API 密钥自动填充缺失的条目。仅翻译缺失的字符串，现有字符串保持不变。 示例： npx intlayer trans:i18next --provider=chatgpt 它将为所有语言环境中缺失的键生成翻译。 第 3 步 — 集成到 CI/CD 中 您可以将其插入 CI 以确保没有新的缺失键 介绍： npx intlayer test:i18next --ci 如果发现缺少翻译，它可能会使管道失败或仅根据您的配置记录警告。 奖励：通过 Git 检测 JSON 更改甚至有一个 (WIP) 功能可以使用 git diff 检测翻译 JSON 中的哪些行发生更改，因此它只重新翻译原来的内容 已修改。 如果您使用 Next.js 以下指南解释了如何使用 next-i18next 进行设置（基于 i18next）：👉 https://intlayer.org/fr/blog/intlayer-with-next-i18next TL;DR 自动测试缺失的翻译 使用 AI 自动填充缺失的 JSON 条目 与 CI/CDWorks 集成 i18next   由   提交/u/AdmirableJackfruit59   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi5f42/how_to_test_and_replace_any_missing_translations/</guid>
      <pubDate>Tue, 28 Oct 2025 10:11:00 GMT</pubDate>
    </item>
    <item>
      <title>2025 年初学者开始学习数据结构和算法 (DSA) 的最佳路线图是什么？</title>
      <link>https://www.reddit.com/r/programming/comments/1oi3s16/what_is_the_best_roadmap_to_start_learning_data/</link>
      <description><![CDATA[我在 YouTube 视频中通过视觉效果和示例详细解释了这一点 - 它涵盖了类型、用途以及面向初学者的完整 DSA 路线图。   由   提交/u/SMprogrmming   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi3s16/what_is_the_best_roadmap_to_start_learning_data/</guid>
      <pubDate>Tue, 28 Oct 2025 08:19:50 GMT</pubDate>
    </item>
    <item>
      <title>蜘蛛时代开始</title>
      <link>https://www.reddit.com/r/programming/comments/1oi3g5g/the_spider_era_begins/</link>
      <description><![CDATA[🚀 官方更新：Spider 时代开始 我很高兴地宣布，Spider Notebook 将于 2025 年 11 月 1 日登陆网络，随后于 11 月 5 日至 6 日发布桌面版本！ 🔹 Spider Notebook（网页版）——功能强大、速度快且支持云连接。 🔹 Spider Notebook（桌面） - 相同的体验，针对喜欢本地控制的创作者进行了优化。 所有官方文档、示例和学习材料都将很快在我们的网站上发布 - 请继续关注公共链接。  🧠 为什么 Spider Notebook 与众不同 像 Google Colab 这样的大多数平台都专注于单一语言（主要是 Python）并严重依赖外部 运行时。 Spider Notebook 的构建方式有所不同： 功能 Google Colab Spider Notebook 核心语言 主要是 Python Python、C++、Java、Kotlin、C#（混合 Spy 格式） 执行模型 每个运行时一种语言 统一 Spy 引擎无缝连接所有语言 文件上下文 临时会话存储 持久的、基于项目的工作区 协作 有限的单元共享 完全实时项目协作 性能相关 在 Google 服务器上优化的多域间谍引擎、云链接用例学习和数据科学 用于应用程序、人工智能和系统设计的完整创建平台  💡 简而言之：Spider Notebook 不仅仅用于运行代码 - 它还用于创建整个系统。从人工智能管道到混合应用程序，它由 Spy Engine 提供支持，这是一种多运行时架构，允许每种语言进行智能通信。 Web 版本将充当您随时可用的创意工作区 - 无需本地设置，只需打开浏览器并构建以前从未构建过的东西。  🌐 发布日期：11 月 1 日（Spider Notebook Web）💻 桌面 发布：11 月 5 日至 6 日 📘 文档：即将在 m4spider.com 上推出 SpiderNotebook #SpyLanguage #Innovation #AI #Programming #CloudComputing #M4Spider   由   提交/u/Sea_Guarantee_459   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi3g5g/the_spider_era_begins/</guid>
      <pubDate>Tue, 28 Oct 2025 07:56:51 GMT</pubDate>
    </item>
    </channel>
</rss>