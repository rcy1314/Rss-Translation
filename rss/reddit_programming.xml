<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Tue, 28 Oct 2025 12:49:42 GMT</lastBuildDate>
    <item>
      <title>现场编码恍惚</title>
      <link>https://www.reddit.com/r/programming/comments/1oi8818/live_coding_trance/</link>
      <description><![CDATA[ 由   提交 /u/DelilahsDarkThoughts   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi8818/live_coding_trance/</guid>
      <pubDate>Tue, 28 Oct 2025 12:38:24 GMT</pubDate>
    </item>
    <item>
      <title>edit-mind,使用 AI（对象检测、人脸识别、情感分析）索引视频的桌面应用程序,通过自然语言查询启用语义搜索并生成粗剪,下载edit-mind的源码_GitHub_帮酷</title>
      <link>https://www.reddit.com/r/programming/comments/1oi7ped/github_iliashadeditmind_desktop_app_that_indexes/</link>
      <description><![CDATA[ 由   提交 /u/IliasHad   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi7ped/github_iliashadeditmind_desktop_app_that_indexes/</guid>
      <pubDate>Tue, 28 Oct 2025 12:14:31 GMT</pubDate>
    </item>
    <item>
      <title>对于编程团队来说，敏捷到底是一个骗局还是陷阱？</title>
      <link>https://www.reddit.com/r/programming/comments/1oi797o/is_agile_a_total_scam_or_trap_for_the_programming/</link>
      <description><![CDATA[敏捷编程方法源于软件世界与商业世界的妥协。原则上，程序员喜欢在一个定义明确、计划周密的项目上工作，这正是瀑布式所需要的，但实际上，客户总是倾向于改变他们的需求，这使得瀑布式方法几乎不可能落地。因此，软件世界不再坚持需求变更的僵化。这就是敏捷方法论的用武之地。它提供了灵活性和对变化的适应，这基本上是对业务术语的完全投降。然而，这种理想的方法有一个前提，即客户或业务团队也愿意妥协他们的项目范围，即，即使他们的一些原始需求由于未来需求的变化而无法交付，他们也愿意签署项目。不幸的是，在许多情况下，客户对变更和全面交付都施加压力，这导致编程团队和成本超支。我们总是可以说额外的改变会耗尽计划的资源，但是我们经常发现我们在与客户谈判时处于弱势地位，并且很可能最终接受他们的主张。与瀑布相比，敏捷放弃了严格定义的需求和僵化的变更的第一道防线。这对我们来说不是一个骗局或陷阱吗？    由   提交 /u/DK_ZJJ0801   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi797o/is_agile_a_total_scam_or_trap_for_the_programming/</guid>
      <pubDate>Tue, 28 Oct 2025 11:52:45 GMT</pubDate>
    </item>
    <item>
      <title>想要更好的安全性吗？像攻击者一样进行测试</title>
      <link>https://www.reddit.com/r/programming/comments/1oi5uty/want_better_security_test_like_attackers_would/</link>
      <description><![CDATA[ 由   提交 /u/shift_devs   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi5uty/want_better_security_test_like_attackers_would/</guid>
      <pubDate>Tue, 28 Oct 2025 10:36:46 GMT</pubDate>
    </item>
    <item>
      <title>JSON Query - 一种小型、灵活且可扩展的 JSON 查询语言</title>
      <link>https://www.reddit.com/r/programming/comments/1oi5kjt/json_query_a_small_flexible_and_expandable_json/</link>
      <description><![CDATA[ 由   提交/u/BrewedDoritos  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi5kjt/json_query_a_small_flexible_and_expandable_json/</guid>
      <pubDate>Tue, 28 Oct 2025 10:19:55 GMT</pubDate>
    </item>
    <item>
      <title>如何使用 i18next 测试和替换任何缺失的翻译</title>
      <link>https://www.reddit.com/r/programming/comments/1oi5f42/how_to_test_and_replace_any_missing_translations/</link>
      <description><![CDATA[我最近在使用 i18next 时发现了一种非常实用的方法来检测和填充缺失的翻译，老实说，当您有数十个 JSON 文件需要维护时，它可以节省大量时间。 第 1 步 - 测试缺失的翻译 您现在可以自动检查本地化文件中是否缺少任何键。它适用于您的 CLI、CI/CD 管道，甚至您的 Jest/Vitest 测试套件。 示例： npx intlayer test:i18next 它会扫描您的代码库，将其与 JSON 文件进行比较，并输出哪些密钥丢失或未使用。在部署或合并 PR 之前非常方便。 第 2 步 - 自动填充缺失的翻译 您可以选择 AI 提供商（ChatGPT、Claude、DeepSeek 或 Mistral）并使用您自己的 API 密钥自动填充缺失的条目。仅翻译缺失的字符串，现有字符串保持不变。 示例： npx intlayer trans:i18next --provider=chatgpt 它将为所有语言环境中缺失的键生成翻译。 第 3 步 — 集成到 CI/CD 中 您可以将其插入 CI 以确保没有新的缺失键 介绍： npx intlayer test:i18next --ci 如果发现缺少翻译，它可能会使管道失败或仅根据您的配置记录警告。 奖励：通过 Git 检测 JSON 更改甚至有一个 (WIP) 功能可以使用 git diff 检测翻译 JSON 中的哪些行发生更改，因此它只重新翻译原来的内容 已修改。 如果您使用 Next.js 以下指南解释了如何使用 next-i18next 进行设置（基于 i18next）：👉 https://intlayer.org/fr/blog/intlayer-with-next-i18next TL;DR 自动测试缺失的翻译 使用 AI 自动填充缺失的 JSON 条目 与 CI/CDWorks 集成 i18next   由   提交/u/AdmirableJackfruit59   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi5f42/how_to_test_and_replace_any_missing_translations/</guid>
      <pubDate>Tue, 28 Oct 2025 10:11:00 GMT</pubDate>
    </item>
    <item>
      <title>2025 年初学者开始学习数据结构和算法 (DSA) 的最佳路线图是什么？</title>
      <link>https://www.reddit.com/r/programming/comments/1oi3s16/what_is_the_best_roadmap_to_start_learning_data/</link>
      <description><![CDATA[我在 YouTube 视频中通过视觉效果和示例详细解释了这一点 - 它涵盖了类型、用途以及面向初学者的完整 DSA 路线图。   由   提交/u/SMprogrmming   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi3s16/what_is_the_best_roadmap_to_start_learning_data/</guid>
      <pubDate>Tue, 28 Oct 2025 08:19:50 GMT</pubDate>
    </item>
    <item>
      <title>蜘蛛时代开始</title>
      <link>https://www.reddit.com/r/programming/comments/1oi3g5g/the_spider_era_begins/</link>
      <description><![CDATA[🚀 官方更新：Spider 时代开始 我很高兴地宣布，Spider Notebook 将于 2025 年 11 月 1 日登陆网络，随后于 11 月 5 日至 6 日发布桌面版本！ 🔹 Spider Notebook（网页版）——功能强大、速度快且支持云连接。 🔹 Spider Notebook（桌面） - 相同的体验，针对喜欢本地控制的创作者进行了优化。 所有官方文档、示例和学习材料都将很快在我们的网站上发布 - 请继续关注公共链接。  🧠 为什么 Spider Notebook 与众不同 像 Google Colab 这样的大多数平台都专注于单一语言（主要是 Python）并严重依赖外部 运行时。 Spider Notebook 的构建方式有所不同： 功能 Google Colab Spider Notebook 核心语言 主要是 Python Python、C++、Java、Kotlin、C#（混合 Spy 格式） 执行模型 每个运行时一种语言 统一 Spy 引擎无缝连接所有语言 文件上下文 临时会话存储 持久的、基于项目的工作区 协作 有限的单元共享 完全实时项目协作 性能相关 在 Google 服务器上优化的多域间谍引擎、云链接用例学习和数据科学 用于应用程序、人工智能和系统设计的完整创建平台  💡 简而言之：Spider Notebook 不仅仅用于运行代码 - 它还用于创建整个系统。从人工智能管道到混合应用程序，它由 Spy Engine 提供支持，这是一种多运行时架构，允许每种语言进行智能通信。 Web 版本将充当您随时可用的创意工作区 - 无需本地设置，只需打开浏览器并构建以前从未构建过的东西。  🌐 发布日期：11 月 1 日（Spider Notebook Web）💻 桌面 发布：11 月 5 日至 6 日 📘 文档：即将在 m4spider.com 上推出 SpiderNotebook #SpyLanguage #Innovation #AI #Programming #CloudComputing #M4Spider   由   提交/u/Sea_Guarantee_459   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi3g5g/the_spider_era_begins/</guid>
      <pubDate>Tue, 28 Oct 2025 07:56:51 GMT</pubDate>
    </item>
    <item>
      <title>编译器的魔力和太聪明的代价</title>
      <link>https://www.reddit.com/r/programming/comments/1oi1fsi/compiler_magic_and_the_costs_of_being_too_clever/</link>
      <description><![CDATA[这是受到 Vercel 新工作流功能发布的启发，该功能采用两个 TypeScript 指令（“使用工作流”和“使用步骤”）并将普通的异步函数转变为长期、持久的工作流。好吧，我总体上持怀疑态度，这个视频将解释其原因。 为不耐烦的人总结：TypeScript 并不是一根使各种新魔法成为可能的魔杖。   由   提交/u/stumblingtowards  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oi1fsi/compiler_magic_and_the_costs_of_being_too_clever/</guid>
      <pubDate>Tue, 28 Oct 2025 05:40:09 GMT</pubDate>
    </item>
    <item>
      <title>Java 发布了新的早期访问 JDK 版本，其中包括值类！</title>
      <link>https://www.reddit.com/r/programming/comments/1ohzz8u/java_has_released_a_new_early_access_jdk_build/</link>
      <description><![CDATA[ 由   提交/u/davidalayachew   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ohzz8u/java_has_released_a_new_early_access_jdk_build/</guid>
      <pubDate>Tue, 28 Oct 2025 04:11:53 GMT</pubDate>
    </item>
    <item>
      <title>Web 开发中的 AI - 这改变了一切 |我从事 Web 开发已有 10 年 |自从 Agentic AI 在 GitHub Copilot 中可用以来，我一直在使用它 |</title>
      <link>https://www.reddit.com/r/programming/comments/1ohvpur/ai_in_web_development_this_changes_everything_i/</link>
      <description><![CDATA[ 由   提交/u/Frequent-Football984   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ohvpur/ai_in_web_development_this_changes_everything_i/</guid>
      <pubDate>Tue, 28 Oct 2025 00:42:36 GMT</pubDate>
    </item>
    <item>
      <title>PostgreSQL 的扩展策略（垂直扩展、水平扩展和其他高可用性策略）</title>
      <link>https://www.reddit.com/r/programming/comments/1ohvlhi/strategies_for_scaling_postgresql_vertical/</link>
      <description><![CDATA[ 由   提交 /u/pgEdge_Postgres   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ohvlhi/strategies_for_scaling_postgresql_vertical/</guid>
      <pubDate>Tue, 28 Oct 2025 00:37:05 GMT</pubDate>
    </item>
    <item>
      <title>衡量工程生产力</title>
      <link>https://www.reddit.com/r/programming/comments/1ohqpvu/measuring_engineering_productivity/</link>
      <description><![CDATA[ 由   提交/u/duruq  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ohqpvu/measuring_engineering_productivity/</guid>
      <pubDate>Mon, 27 Oct 2025 21:12:39 GMT</pubDate>
    </item>
    <item>
      <title>无错误政策</title>
      <link>https://www.reddit.com/r/programming/comments/1ohqf61/no_bug_policy/</link>
      <description><![CDATA[ 由   提交/u/_Krayorn_  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ohqf61/no_bug_policy/</guid>
      <pubDate>Mon, 27 Oct 2025 21:01:02 GMT</pubDate>
    </item>
    <item>
      <title>从网格到紧凑令牌：像素艺术的压缩。</title>
      <link>https://www.reddit.com/r/programming/comments/1ohqd40/from_a_grid_to_a_compact_token_compression_of_a/</link>
      <description><![CDATA[我写了这篇关于我从事的项目的技术博客文章。这是一个有趣的挑战。我从中学到了很多东西。   由   提交 /u/pepe_torres1998   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ohqd40/from_a_grid_to_a_compact_token_compression_of_a/</guid>
      <pubDate>Mon, 27 Oct 2025 20:58:48 GMT</pubDate>
    </item>
    </channel>
</rss>