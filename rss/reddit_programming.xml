<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 22 Oct 2025 12:51:56 GMT</lastBuildDate>
    <item>
      <title>简化您的代码：功能核心、命令式外壳</title>
      <link>https://www.reddit.com/r/programming/comments/1od6z2h/simplify_your_code_functional_core_imperative/</link>
      <description><![CDATA[ 由   提交 /u/codingindoc   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od6z2h/simplify_your_code_functional_core_imperative/</guid>
      <pubDate>Wed, 22 Oct 2025 12:32:22 GMT</pubDate>
    </item>
    <item>
      <title>使用 Rust 响应服务器组件：P99 延迟比 Next.js 快 12 倍</title>
      <link>https://www.reddit.com/r/programming/comments/1od6vja/react_server_components_with_rust_12x_faster_p99/</link>
      <description><![CDATA[我构建了 Rari，一个带有 Rust 运行时的 React 框架。我们刚刚添加了适当的应用程序路由器支持、SSR 和正确的 RSC 语义。 结果： - 0.69 毫秒平均响应（比 Next.js 快 3.8 倍） - 20,226 请求/秒吞吐量（高 10.5 倍） - 负载下 4 毫秒 P99 延迟（快 12 倍） - 包小 68% 架构：默认情况下服务器组件，“使用客户端” 交互性，来自 Rust 运行时的真正 SSR。当您的实现符合 React 的设计理念时，性能自然会随之而来。 阅读全文：https://ryanskinner.com/posts/the-rari-ssr-breakthrough-12x-faster-10x-higher-throughput-than-nextjs 尝试一下：npm create rari-app@latest GitHub：https://github.com/rari-build/rari 所有基准测试：https://github.com/rari-build/benchmarks   由   提交/u/BadDogDoug  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od6vja/react_server_components_with_rust_12x_faster_p99/</guid>
      <pubDate>Wed, 22 Oct 2025 12:27:59 GMT</pubDate>
    </item>
    <item>
      <title>通过迭代器和转换器在 JavaScript 和 Clojure 中进行流数据转换</title>
      <link>https://www.reddit.com/r/programming/comments/1od6fbb/streamed_data_transformation_in_javascript_and/</link>
      <description><![CDATA[ 由   提交/u/roman01la  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od6fbb/streamed_data_transformation_in_javascript_and/</guid>
      <pubDate>Wed, 22 Oct 2025 12:07:04 GMT</pubDate>
    </item>
    <item>
      <title>立即备份您的 GitHub 存储库！</title>
      <link>https://www.reddit.com/r/programming/comments/1od5jl7/backup_your_github_repositories_now/</link>
      <description><![CDATA[ 由   提交 /u/adityathebe   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od5jl7/backup_your_github_repositories_now/</guid>
      <pubDate>Wed, 22 Oct 2025 11:22:45 GMT</pubDate>
    </item>
    <item>
      <title>我从头开始构建了“nanograd”，一个微型自动差分引擎，以了解 PyTorch 的工作原理。</title>
      <link>https://www.reddit.com/r/programming/comments/1od53mw/i_built_nanograd_a_tiny_autodiff_engine_from/</link>
      <description><![CDATA[ 由   提交/u/Savings_Delay_5357  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od53mw/i_built_nanograd_a_tiny_autodiff_engine_from/</guid>
      <pubDate>Wed, 22 Oct 2025 10:59:11 GMT</pubDate>
    </item>
    <item>
      <title>为什么大多数“人工智能框架”感觉像是在生产中崩溃的演示？</title>
      <link>https://www.reddit.com/r/programming/comments/1od4z6s/why_do_most_ai_frameworks_feel_like_demos_that/</link>
      <description><![CDATA[我最近测试了六种代理框架，它们都承诺可用于生产就绪的编排，但几乎没有一个能够在现实世界中扩展。 我见过的主要杀手：  Python 并发瓶颈 任务中的上下文丢失 高电压下的随机崩溃 I/O  感觉业界正在将编排视为胶水代码而不是系统问题。 我们一直在尝试基于 Rust 的运行时来正面解决这些问题（共享状态、无锁调度、断路器）。 如果您想了解幕后情况，请在此处查看：https://github.com/InfinitiBit/graphbit 您的看法是，AI 框架是否因为过于关注模型而不够关注基础设施而未能达到目标？   由   提交/u/imrul009  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od4z6s/why_do_most_ai_frameworks_feel_like_demos_that/</guid>
      <pubDate>Wed, 22 Oct 2025 10:52:12 GMT</pubDate>
    </item>
    <item>
      <title>我们来做个游戏吧！ 343：快滚</title>
      <link>https://www.reddit.com/r/programming/comments/1od4ulo/lets_make_a_game_343_the_squick_roll/</link>
      <description><![CDATA[ 由   提交/u/apeloverage  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od4ulo/lets_make_a_game_343_the_squick_roll/</guid>
      <pubDate>Wed, 22 Oct 2025 10:44:57 GMT</pubDate>
    </item>
    <item>
      <title>系统设计中的幂等性：完整示例</title>
      <link>https://www.reddit.com/r/programming/comments/1od451a/idempotency_in_system_design_full_example/</link>
      <description><![CDATA[ 由   提交/u/trolleid   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od451a/idempotency_in_system_design_full_example/</guid>
      <pubDate>Wed, 22 Oct 2025 10:03:09 GMT</pubDate>
    </item>
    <item>
      <title>我为 AI API 构建了一个开源反向代理（支持 OpenAI、Claude、Gemini...）</title>
      <link>https://www.reddit.com/r/programming/comments/1od3eww/i_built_an_opensource_reverse_proxy_for_ai_apis/</link>
      <description><![CDATA[嘿开发者！我这样做是为了简化通过单个网关代理多个 AI 模型端点的过程...   由   提交 /u/Tero_Box   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od3eww/i_built_an_opensource_reverse_proxy_for_ai_apis/</guid>
      <pubDate>Wed, 22 Oct 2025 09:17:49 GMT</pubDate>
    </item>
    <item>
      <title>Next.js App Router 一年了——我们为何继续前进</title>
      <link>https://www.reddit.com/r/programming/comments/1od38nd/one_year_with_nextjs_app_router_why_were_moving_on/</link>
      <description><![CDATA[ 由   提交/u/mistyharsh   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od38nd/one_year_with_nextjs_app_router_why_were_moving_on/</guid>
      <pubDate>Wed, 22 Oct 2025 09:06:40 GMT</pubDate>
    </item>
    <item>
      <title>规范模式：DDD 超越聚合、实体和值对象</title>
      <link>https://www.reddit.com/r/programming/comments/1od2cvo/specification_pattern_ddd_beyound_aggregates/</link>
      <description><![CDATA[规范模式测试对象是否满足特定要求。在传统方法中，业务规则通常分散在实体、服务或存储库中，这使得它们难以测试、重用和修改。规范模式将这些规则集中到专用的类中。   由   提交 /u/73mp74710n   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od2cvo/specification_pattern_ddd_beyound_aggregates/</guid>
      <pubDate>Wed, 22 Oct 2025 08:09:18 GMT</pubDate>
    </item>
    <item>
      <title>使用 Java 从头开始​​构建您自己的 API 网关</title>
      <link>https://www.reddit.com/r/programming/comments/1od258i/build_your_own_api_gateway_from_scratch_in_java/</link>
      <description><![CDATA[ 由   提交/u/kishunkumaar   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od258i/build_your_own_api_gateway_from_scratch_in_java/</guid>
      <pubDate>Wed, 22 Oct 2025 07:55:30 GMT</pubDate>
    </item>
    <item>
      <title>斯托曼主义宣言</title>
      <link>https://www.reddit.com/r/programming/comments/1od1wpf/the_stallmanist_manifesto/</link>
      <description><![CDATA[回顾并了解 OSS 和 FOSS 运动如何开始的历史以及它们背后的主要原则和意识形态是很有趣的。称开源共产主义背后还有一些容易被误解的误解，而现在拥抱 OSS 的公司过去常常进一步加剧这种误解；这篇文章也解决了这个问题。最后，OSS 和 FOSS 之间的区别不仅仅是“F”，而且这两个术语不能互换。我希望您觉得它很有趣！   由   提交 /u/Full-Ad4541   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od1wpf/the_stallmanist_manifesto/</guid>
      <pubDate>Wed, 22 Oct 2025 07:40:10 GMT</pubDate>
    </item>
    <item>
      <title>追寻根本原因 — PyCon NL 2025 上的演讲</title>
      <link>https://www.reddit.com/r/programming/comments/1od1siq/race_to_the_root_cause_talk_at_pycon_nl_2025/</link>
      <description><![CDATA[示例包括：  链式异常谜题：Python 的“在处理上述异常期间，发生了另一个异常”消息很少使真实的流程变得明显。我们将看到这些堆栈跟踪如何迫使您拼凑出实际发生的情况。 缺少的花括号：有时 Python 会指责带有 with 语句的行，即使那里没有代码运行。为什么会出现这种情况？它与大括号有什么关系？   到最后，您将对 Python 的堆栈跟踪有更好的感觉，一些更快调试的新策略，并且至少有一个故事可以在下次堆栈跟踪试图欺骗您时分享。当你离开时，你会获得更敏锐的调试本能、一些实用的技巧，也许还会嘲笑 Python 的牺牲。如果您曾经觉得自己被堆栈跟踪打败了，那么这是您竞相找出根本原因并获胜的机会。   由   提交/u/klaasvanschelven   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od1siq/race_to_the_root_cause_talk_at_pycon_nl_2025/</guid>
      <pubDate>Wed, 22 Oct 2025 07:32:32 GMT</pubDate>
    </item>
    <item>
      <title>什么是好的软件架构？</title>
      <link>https://www.reddit.com/r/programming/comments/1od1l97/what_is_good_software_architecture/</link>
      <description><![CDATA[ 由   提交 /u/thewritingwallah   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od1l97/what_is_good_software_architecture/</guid>
      <pubDate>Wed, 22 Oct 2025 07:19:06 GMT</pubDate>
    </item>
    </channel>
</rss>