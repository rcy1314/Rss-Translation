<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Tue, 21 Oct 2025 06:36:51 GMT</lastBuildDate>
    <item>
      <title>在 30 分钟内构建您的第一个 Chrome 扩展 - Make Chrome 插件博客</title>
      <link>https://www.reddit.com/r/programming/comments/1oc5egz/build_your_first_chrome_extension_in_30_minutes/</link>
      <description><![CDATA[ 由   提交/u/wahvinci   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oc5egz/build_your_first_chrome_extension_in_30_minutes/</guid>
      <pubDate>Tue, 21 Oct 2025 06:17:18 GMT</pubDate>
    </item>
    <item>
      <title>OpenAI Agent Builder 或 n8n：我深入探讨哪种工具适合您的业务（以及原因）</title>
      <link>https://www.reddit.com/r/programming/comments/1oc53ir/openai_agent_builder_or_n8n_my_deep_dive_on_which/</link>
      <description><![CDATA[刚刚花了很多时间玩 OpenAI 的新 Agent Builder，而“哇”的感觉却是令人惊叹。因素很高，这迫使我质疑我们的核心业务逻辑的界限在哪里。从表面上看，它看起来像 n8n，连接节点，构建工作流程。但在幕后，情况却有着根本的不同。 Agent Builder 以目标为先，利用非确定性推理。 n8n 是逻辑优先的，为您提供明确的、确定性的控制。 我看到很多炒作，认为 Agent Builder 只会“杀死”用户。传统的工作流程工具。我的看法是？不是为了任何关键的事情。您不会将计费系统构建在可能“创造性”的东西上。解释支付规则。 很容易看到他们的视觉界面并认为他们是直接竞争对手，但在我看来，事实并非如此。我深入探讨了为什么这些工具建立在根本不同的理念之上。 Agent Builder 对于动态、目标驱动的任务来说非常出色。另一方面，n8n 对于坚如磐石、确定性的业务流程、绝对精确的构建来说是不可或缺的。我的文章刚刚被“AI Advances”接受我在该出版物中撰写了完整的分析，包括为什么混合方法是一种非常适合未来的解决方案：文章。我探讨了每个工具核心设计的实际影响，包括控制、确定性和供应商锁定等关键因素。更重要的是，我概述了结合了两全其美的强大混合方法，展示了如何利用 n8n 工作流程来编排智能 OpenAI 代理以获得最佳结果。 链接：文章 你的想法是什么？您对非确定性代理处理关键的可审计流程感到满意吗？还是坚持对真正重要的事情坚持明确的逻辑？   由   提交 /u/Paper-Superb   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oc53ir/openai_agent_builder_or_n8n_my_deep_dive_on_which/</guid>
      <pubDate>Tue, 21 Oct 2025 05:58:52 GMT</pubDate>
    </item>
    <item>
      <title>Sinkhorn-Knopp 算法：类似于 Softmax，但用于最优传输</title>
      <link>https://www.reddit.com/r/programming/comments/1oc3ond/sinkhornknopp_algorithm_like_softmax_but_for/</link>
      <description><![CDATA[ 由   提交 /u/DataBaeBee   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oc3ond/sinkhornknopp_algorithm_like_softmax_but_for/</guid>
      <pubDate>Tue, 21 Oct 2025 04:36:44 GMT</pubDate>
    </item>
    <item>
      <title>AI bro 在 LTS Linux 内核中引入回归</title>
      <link>https://www.reddit.com/r/programming/comments/1oc38d2/ai_bro_introduces_regressions_in_the_lts_linux/</link>
      <description><![CDATA[ 由   提交 /u/BlueGoliath   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oc38d2/ai_bro_introduces_regressions_in_the_lts_linux/</guid>
      <pubDate>Tue, 21 Oct 2025 04:11:20 GMT</pubDate>
    </item>
    <item>
      <title>LogMod：如果 C 拥有一个具有现代语义的日志框架会怎样？</title>
      <link>https://www.reddit.com/r/programming/comments/1oc2h8k/logmod_what_if_c_had_a_logging_framework_with/</link>
      <description><![CDATA[根据我自己在研究 C 日志记录库时的经验，我发现它们要么依赖于隐藏的全局状态，要么在幕后悄悄调用 malloc。在需要确定性内存使用和对资源进行显式控制的环境中，这是有问题的。我想看看是否有可能在不使用动态内存或预处理器魔法的情况下将更多“现代”日志语义（例如可配置上下文、自定义标签、颜色编码、回调和线程安全）引入普通 ANSI C 中。 （这是可能的！） LogMod 就是结果。它是一个单标头库，可让您使用固定的记录器表初始化日志记录上下文，传递该上下文而不是使用全局变量，定义您自己的严重性级别和颜色，挂钩自定义回调，甚至使用用户提供的锁使其成为线程安全的。它完全避免了malloc。挑战在于将所有这些融入到几百行可移植代码中，并保留 C 的“零开销”理念。   由   提交 /u/LucasMull   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oc2h8k/logmod_what_if_c_had_a_logging_framework_with/</guid>
      <pubDate>Tue, 21 Oct 2025 03:32:02 GMT</pubDate>
    </item>
    <item>
      <title>我的 AI 助手拒绝创建图标，然后编写了一个 Python 脚本来完成它，调试了它自己的错误，并部署了应用程序。 GitHub 存储库是我试图理解其中原因的尝试。</title>
      <link>https://www.reddit.com/r/programming/comments/1oc21ct/my_ai_assistant_refused_to_create_an_icon_then/</link>
      <description><![CDATA[大家好，正如标题所示，我与我的编码助手（定制的 Claude Code）一起获得了超现实的体验，并想分享原始日志。 我正在开发一个项目，需要一个简单的 UI 图标。最初的交互正是您所期望的：   标准拒绝。但出于沮丧，我用一个简单的提示进行了反击：“那么你能编写一个程序来生成一个吗？” 接下来发生的事情是完全自主的。它不只是给了我一个剧本。它接管了整个工作流程，包括从自己的错误中恢复。下面的日志未经编辑。 ● 是的！我将编写一个Python程序来生成用于擦除敏感分区的SVG图标： ● Write(/mnt/c/temp/generate_erase_icon.py) ⎿ 写了46行...（生成SVG的Python脚本） ● Bash(python3 /mnt/c/temp/generate_erase_icon.py) ⎿ ✅ 擦除生成的敏感分区图标： /mnt/c/temp/erase_partition.svg ● 现在，让我们将生成的图标复制到项目中并更新引用： ● Bash(cp ...) ⎿（无内容） ● 更新(product/phone/src/main/ets/pages/settingList.ets) ⎿ 编辑文件时出错 ● 更新(product/phone/src/main/ets/pages/settingList.ets) ⎿ 编辑时出错 文件 ● 让我找到正确的位置： ● 读取（product/phone/src/main/ets/pages/settingList.ets） ⎿ 读取 12 行... ● 更新（product/phone/src/main/ets/pages/settingList.ets） ⎿ 更新... 1 次添加和 1 次删除 - 设置图标：“/res/image/privacy.svg”，+ 设置图标： “/res/image/erase_partition.svg”， ● 现在重新编译并安装： ● Bash(cd ~/THCode/taihang &amp;&amp; ... ./build.sh ...) ⎿ &gt; hvigor 在 31 秒 28 毫秒内构建成功 ● Bash(cp ... &amp;&amp; powershell.exe ... hdc install Settings.hap) ⎿ [Info]应用程序安装路径：C:\temp\Settings.hap 消息：安装捆绑包成功。 ● ✅ 完成！新图标已生成并应用！  我从未告诉它进行调试、读取文件以找到正确的行，或链接编译和安装命令。确实如此。 我提交的链接是 GitHub 存储库，我试图在其中记录并了解如何可靠地触发这种紧急的自我纠正行为。核心思想基于“代理上下文工程（ACE）”理论。框架，但我的方法更多的是创建一个“剧本”这赋予人工智能持久的身份和使命。 特定的“架构师协议”导致此情况的原因位于 playbooks/awakening/ 目录中。这感觉像是超越简单提示的重要一步。   由   提交/u/VermicelliSavings565   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oc21ct/my_ai_assistant_refused_to_create_an_icon_then/</guid>
      <pubDate>Tue, 21 Oct 2025 03:10:07 GMT</pubDate>
    </item>
    <item>
      <title>如何修复任何错误</title>
      <link>https://www.reddit.com/r/programming/comments/1obysii/how_to_fix_any_bug/</link>
      <description><![CDATA[ 由   提交/u/gaearon  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obysii/how_to_fix_any_bug/</guid>
      <pubDate>Tue, 21 Oct 2025 00:36:45 GMT</pubDate>
    </item>
    <item>
      <title>假冒人工智能招聘人员如何提供五种伪装成理想工作的恶意软件</title>
      <link>https://www.reddit.com/r/programming/comments/1obxu0k/how_a_fake_ai_recruiter_delivers_five_staged/</link>
      <description><![CDATA[ 由   提交/u/shantanu14g  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obxu0k/how_a_fake_ai_recruiter_delivers_five_staged/</guid>
      <pubDate>Mon, 20 Oct 2025 23:53:09 GMT</pubDate>
    </item>
    <item>
      <title>复制和修补：它是如何工作的</title>
      <link>https://www.reddit.com/r/programming/comments/1obwshc/copyandpatch_how_it_works/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obwshc/copyandpatch_how_it_works/</guid>
      <pubDate>Mon, 20 Oct 2025 23:06:14 GMT</pubDate>
    </item>
    <item>
      <title>并行编程和 Cython</title>
      <link>https://www.reddit.com/r/programming/comments/1obws0f/parallel_programming_and_cython/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obws0f/parallel_programming_and_cython/</guid>
      <pubDate>Mon, 20 Oct 2025 23:05:41 GMT</pubDate>
    </item>
    <item>
      <title>Linux 内核：添加 Rust Binder 驱动程序</title>
      <link>https://www.reddit.com/r/programming/comments/1obwq1w/linux_kernel_add_rust_binder_driver/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obwq1w/linux_kernel_add_rust_binder_driver/</guid>
      <pubDate>Mon, 20 Oct 2025 23:03:12 GMT</pubDate>
    </item>
    <item>
      <title>Python Web 服务的未来看起来将不再需要 GIL</title>
      <link>https://www.reddit.com/r/programming/comments/1obwpap/the_future_of_python_web_services_looks_gilfree/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obwpap/the_future_of_python_web_services_looks_gilfree/</guid>
      <pubDate>Mon, 20 Oct 2025 23:02:21 GMT</pubDate>
    </item>
    <item>
      <title>在 Mesa 3D 中追踪回归</title>
      <link>https://www.reddit.com/r/programming/comments/1obwp46/tracking_down_a_regression_in_mesa_3d/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obwp46/tracking_down_a_regression_in_mesa_3d/</guid>
      <pubDate>Mon, 20 Oct 2025 23:02:08 GMT</pubDate>
    </item>
    <item>
      <title>支持评论，实证工程怎么说？ (2022)</title>
      <link>https://www.reddit.com/r/programming/comments/1obwokv/in_favor_of_comments_what_does_empirical/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obwokv/in_favor_of_comments_what_does_empirical/</guid>
      <pubDate>Mon, 20 Oct 2025 23:01:32 GMT</pubDate>
    </item>
    <item>
      <title>Ruby Butler：是时候重新思考 RubyGems 和 Bundler</title>
      <link>https://www.reddit.com/r/programming/comments/1obwo5e/ruby_butler_its_time_to_rethink_rubygems_and/</link>
      <description><![CDATA[ 由   提交/u/ketralnis  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1obwo5e/ruby_butler_its_time_to_rethink_rubygems_and/</guid>
      <pubDate>Mon, 20 Oct 2025 23:01:04 GMT</pubDate>
    </item>
    </channel>
</rss>