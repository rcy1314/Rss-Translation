<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 22 Oct 2025 09:28:33 GMT</lastBuildDate>
    <item>
      <title>我为 AI API 构建了一个开源反向代理（支持 OpenAI、Claude、Gemini...）</title>
      <link>https://www.reddit.com/r/programming/comments/1od3eww/i_built_an_opensource_reverse_proxy_for_ai_apis/</link>
      <description><![CDATA[嘿开发者！我这样做是为了简化通过单个网关代理多个 AI 模型端点的过程...   由   提交 /u/Tero_Box   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od3eww/i_built_an_opensource_reverse_proxy_for_ai_apis/</guid>
      <pubDate>Wed, 22 Oct 2025 09:17:49 GMT</pubDate>
    </item>
    <item>
      <title>Next.js App Router 一年了——我们为何继续前进</title>
      <link>https://www.reddit.com/r/programming/comments/1od38nd/one_year_with_nextjs_app_router_why_were_moving_on/</link>
      <description><![CDATA[ 由   提交/u/mistyharsh   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od38nd/one_year_with_nextjs_app_router_why_were_moving_on/</guid>
      <pubDate>Wed, 22 Oct 2025 09:06:40 GMT</pubDate>
    </item>
    <item>
      <title>规范模式：DDD 超越聚合、实体和值对象</title>
      <link>https://www.reddit.com/r/programming/comments/1od2cvo/specification_pattern_ddd_beyound_aggregates/</link>
      <description><![CDATA[规范模式测试对象是否满足特定要求。在传统方法中，业务规则通常分散在实体、服务或存储库中，这使得它们难以测试、重用和修改。规范模式将这些规则集中到专用的类中。   由   提交 /u/73mp74710n   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od2cvo/specification_pattern_ddd_beyound_aggregates/</guid>
      <pubDate>Wed, 22 Oct 2025 08:09:18 GMT</pubDate>
    </item>
    <item>
      <title>使用 Java 从头开始​​构建您自己的 API 网关</title>
      <link>https://www.reddit.com/r/programming/comments/1od258i/build_your_own_api_gateway_from_scratch_in_java/</link>
      <description><![CDATA[ 由   提交/u/kishunkumaar   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od258i/build_your_own_api_gateway_from_scratch_in_java/</guid>
      <pubDate>Wed, 22 Oct 2025 07:55:30 GMT</pubDate>
    </item>
    <item>
      <title>斯托曼主义宣言</title>
      <link>https://www.reddit.com/r/programming/comments/1od1wpf/the_stallmanist_manifesto/</link>
      <description><![CDATA[回顾并了解 OSS 和 FOSS 运动如何开始的历史以及它们背后的主要原则和意识形态是很有趣的。称开源共产主义背后还有一些容易被误解的误解，而现在拥抱 OSS 的公司过去常常进一步加剧这种误解；这篇文章也解决了这个问题。最后，OSS 和 FOSS 之间的区别不仅仅是“F”，而且这两个术语不能互换。我希望您觉得它很有趣！   由   提交 /u/Full-Ad4541   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od1wpf/the_stallmanist_manifesto/</guid>
      <pubDate>Wed, 22 Oct 2025 07:40:10 GMT</pubDate>
    </item>
    <item>
      <title>追寻根本原因 — PyCon NL 2025 上的演讲</title>
      <link>https://www.reddit.com/r/programming/comments/1od1siq/race_to_the_root_cause_talk_at_pycon_nl_2025/</link>
      <description><![CDATA[示例包括：  链式异常谜题：Python 的“在处理上述异常期间，发生了另一个异常”消息很少使真实的流程变得明显。我们将看到这些堆栈跟踪如何迫使您拼凑出实际发生的情况。 缺少的花括号：有时 Python 会指责带有 with 语句的行，即使那里没有代码运行。为什么会发生这种情况？它与大括号有什么关系？   到最后，您将对 Python 的堆栈跟踪有更好的感觉，一些更快调试的新策略，并且至少有一个故事可以在下次堆栈跟踪试图欺骗您时分享。当你离开时，你会获得更敏锐的调试本能、一些实用的技巧，也许还会嘲笑 Python 的牺牲。如果您曾经觉得自己被堆栈跟踪打败了，那么这是您竞相找出根本原因并获胜的机会。   由   提交/u/klaasvanschelven   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od1siq/race_to_the_root_cause_talk_at_pycon_nl_2025/</guid>
      <pubDate>Wed, 22 Oct 2025 07:32:32 GMT</pubDate>
    </item>
    <item>
      <title>什么是好的软件架构？</title>
      <link>https://www.reddit.com/r/programming/comments/1od1l97/what_is_good_software_architecture/</link>
      <description><![CDATA[ 由   提交 /u/thewritingwallah   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od1l97/what_is_good_software_architecture/</guid>
      <pubDate>Wed, 22 Oct 2025 07:19:06 GMT</pubDate>
    </item>
    <item>
      <title>作为开发人员找到使用人工智能的最佳点</title>
      <link>https://www.reddit.com/r/programming/comments/1od15lx/finding_the_sweet_spot_for_using_ai_as_a_developer/</link>
      <description><![CDATA[我正在踏上一段旅程（正如你们大多数人可能正在经历的那样），在这个新的大肆宣传的人工智能世界中寻找自己。今天早上，我有一个恍然大悟的时刻，我想与大家分享。  目前，热爱自己手艺的程序员和只想要结果的程序员之间正在进行着一场战争。虽然这是非常两极分化的，并且可能会引起更多的兴趣。我只是在中间试图找到我们提供的这些新工具的适当平衡。  今天早上我有一个恍然大悟的时刻，我只想与你们分享，也许能得到你们的两分钱。如果您有类似的经历，或者比我现在走得更远。   由   提交 /u/mkdirusername   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od15lx/finding_the_sweet_spot_for_using_ai_as_a_developer/</guid>
      <pubDate>Wed, 22 Oct 2025 06:51:49 GMT</pubDate>
    </item>
    <item>
      <title>SevenDB：反应式但可扩展</title>
      <link>https://www.reddit.com/r/programming/comments/1ocxmao/sevendb_reactive_yet_scalable/</link>
      <description><![CDATA[大家好，我一直在开发一个名为 SevenDB 的项目，这是一个反应式数据库系统，可直接在核心内部实现可扩展、确定性的复制（无需外部流处理器或协调层）。 这个想法是使复制和事件发射严格线性化 - 这意味着每个节点都以相同的顺序重播相同的操作， 没有时间异常。我们还在尝试使用集合点散列的解耦通知者选举协议，以便订阅者通过即时故障转移获得实时更新。 希望从数据库迷或分布式系统人员那里获得一些反馈或棘手问题 - 特别是在复制设计、确定性权衡或实际用例方面。 很高兴分享有关架构或早期基准的更多信息，如果 人们很好奇。我已经在存储库中共享了设计文档。   由   提交 /u/shashanksati   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocxmao/sevendb_reactive_yet_scalable/</guid>
      <pubDate>Wed, 22 Oct 2025 03:29:32 GMT</pubDate>
    </item>
    <item>
      <title>对于快速发展的 SaaS 团队来说，“设计安全”到底是什么样的？</title>
      <link>https://www.reddit.com/r/programming/comments/1ocvxji/what_does_securebydesign_really_look_like_for/</link>
      <description><![CDATA[对于快速发展的 SaaS 团队来说，“安全设计”到底是什么样的？ 大家好， 我一直在深入研究 SaaS 团队如何平衡速度、合规性和可扩展性 - 我很好奇其他人是如何解决这个问题的。 “从一开始就构建安全性”说起来很容易，但实际上，早期团队经常要兼顾有限的时间、预算和相互竞争的优先事项。 我一直在思考的几个问题：  如何将安全性嵌入到 SaaS 架构中而不减慢交付速度？ 尽早赢得企业或受监管买家信任的最有效方法是什么  你们中有人实施过政策即代码或自动合规框架吗？进展如何？ 如果您必须重新开始，您会做出哪些不同的安全或基础设施选择？  我读了很多关于设计安全基础设施如何通过减少摩擦、自动化合规性和缩短企业销售周期来实际提高开发人员速度（而不是减慢速度）的内容。这是一个有趣的观点，颠覆了速度和安全性之间的通常权衡。 如果您有兴趣更深入地探索该主题，这里有一本很棒的免费电子书： 👉  https://nxt1.cloud/download-free-ebook-secure-by-design-saas/?utm_medium=social&amp;utm_source=reddit&amp;utm_content=secure-saas-ebook 很想听听您的团队如何在速度、安全性和可扩展性之间实现平衡，尤其是在快速增长的 SaaS 环境中。   由   提交/u/Motor-Alfalfa-3287   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocvxji/what_does_securebydesign_really_look_like_for/</guid>
      <pubDate>Wed, 22 Oct 2025 02:06:08 GMT</pubDate>
    </item>
    <item>
      <title>我是一名色盲开发人员 - 请停止让红色和绿色完成所有工作。</title>
      <link>https://www.reddit.com/r/programming/comments/1ocuqq0/im_a_developer_whos_colorblind_please_stop_making/</link>
      <description><![CDATA[使您的 UI 色盲友好大约需要五分钟 — 或者大约在同一时间您会想知道为什么这么多用户总是按错按钮。我可能是那些烦人的用户之一，因为我是色盲。您曾经经历过——痴迷于像素对齐或重构除了编译器之外没有人关心的函数。但是，当涉及到检查错误和成功消息对于色盲用户来说是否相同时？突然没有时间了。事实证明，十二分之一的人无法区分“严重红色警报”和“成功绿色横幅”。这就像发布一个应用程序时，8% - 10% 的用户会随机出现异常……视觉上。踢球者？修复它不需要重构、框架或祈祷——只需要一点点深思熟虑和一点点预先的努力。 * 切勿仅依赖颜色。 * 添加图标、标签或任何其他提示。 * 使用内置滤色器进行测试（例如，macOS → 辅助功能 → 显示）。我整理了一个符合 WCAG 2.1 的快速 Markdown 参考指南，作为在 Xcode/Swift 中应用色盲友好规则的简单规则和示例，但它适用于任何堆栈：👉 色盲辅助功能指南 TL;DR：您不会将关键信息隐藏在功能标志后面。也不要将其隐藏在颜色后面。 🎨   由   提交/u/typoprophet101   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocuqq0/im_a_developer_whos_colorblind_please_stop_making/</guid>
      <pubDate>Wed, 22 Oct 2025 01:09:30 GMT</pubDate>
    </item>
    <item>
      <title>高级自我意识教育版(1)</title>
      <link>https://www.reddit.com/r/programming/comments/1ocrfq2/advanced_selfaware_ed1/</link>
      <description><![CDATA[ 由   提交/u/aartaka  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocrfq2/advanced_selfaware_ed1/</guid>
      <pubDate>Tue, 21 Oct 2025 22:41:13 GMT</pubDate>
    </item>
    <item>
      <title>为什么人工智能编码在企业团队中仍然失败</title>
      <link>https://www.reddit.com/r/programming/comments/1ocqcri/why_ai_coding_still_fails_in_enterprise_teams/</link>
      <description><![CDATA[我们请 Thoughtworks 的 Kent Beck、Bryan Finster、Rahib Amin 和 Punit Lad 分享他们对企业 AI 编码的想法。 他们所说的内容与最近在 Reddit 上分享的“我们如何在 FAANG 进行编码”帖子中分享的内容类似 - 未来属于有纪律的、上下文感知的开发，其中规范、 多人游戏工作流程和组织信任比更快地生成更多代码更重要。   由   提交/u/aviator_co   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocqcri/why_ai_coding_still_fails_in_enterprise_teams/</guid>
      <pubDate>Tue, 21 Oct 2025 21:56:46 GMT</pubDate>
    </item>
    <item>
      <title>iRonic：Meta 成为了它所抗争的对象</title>
      <link>https://www.reddit.com/r/programming/comments/1ocq7bl/ironic_meta_became_what_it_fought/</link>
      <description><![CDATA[WhatsApp 禁止通用人工智能助手的新 Business API 规则揭示了 Meta 的类似苹果的转变。这篇博文讨论了这一消息、Meta 的推理、平台控制的最新历史，以及这对早期初创公司的影响。   由   提交/u/ma08  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocq7bl/ironic_meta_became_what_it_fought/</guid>
      <pubDate>Tue, 21 Oct 2025 21:50:45 GMT</pubDate>
    </item>
    <item>
      <title>RestClient.Net 7：编译时安全和 OpenAPI MCP 生成</title>
      <link>https://www.reddit.com/r/programming/comments/1ocpi83/restclientnet_7_compiletime_safety_and_openapi/</link>
      <description><![CDATA[.NET 中 REST 调用的编译时安全性，以及从 OpenAPI 文档生成 MCP 服务器！   由   提交/u/emanresu_2017   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocpi83/restclientnet_7_compiletime_safety_and_openapi/</guid>
      <pubDate>Tue, 21 Oct 2025 21:23:26 GMT</pubDate>
    </item>
    </channel>
</rss>