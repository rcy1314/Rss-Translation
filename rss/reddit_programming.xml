<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 22 Oct 2025 15:27:48 GMT</lastBuildDate>
    <item>
      <title>为腐烂的东西设计软件</title>
      <link>https://www.reddit.com/r/programming/comments/1odagyh/designing_software_for_things_that_rot/</link>
      <description><![CDATA[ 由   提交/u/No-Session6643  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1odagyh/designing_software_for_things_that_rot/</guid>
      <pubDate>Wed, 22 Oct 2025 14:53:23 GMT</pubDate>
    </item>
    <item>
      <title>[展示] APAAI 协议 — 负责任的 AI 开放标准（HTTP/JSON、TypeScript + Python SDK）</title>
      <link>https://www.reddit.com/r/programming/comments/1od9rtc/showcase_apaai_protocol_open_standard_for/</link>
      <description><![CDATA[我们刚刚发布了 **APAAI 协议 v1.0**，这是一个用于记录可验证自主操作的开放标准。 随着人工智能代理开始行动（执行代码、发送请求、做出决策），我们需要一种一致的方式来描述它们的意图、管理它们的策略以及证明结果的证据。 **APAAI** 为此生命周期定义了一个简单的 HTTP/JSON 规范： ➡️ 操作 → 策略 → 证据 - 🌐 文档和文档规范：https://apaaiprotocol.org - 📦 SDK：[TypeScript](https://www.npmjs.com/package/apaai-ts-sdk) • [Python](https://pypi.org/project/apaai) - 💻 来源：https://github.com/apaAI-labs - ⚖️ 许可证：Apache-2.0 目标是使“问责制即代码”*成为一种通用设计模式 - 允许代理和 API 透明地运行，同时保持可审计性。 希望 技术反馈，尤其是来自代理框架、可观察性或治理系统的技术反馈。   由   提交/u/vidiguera  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od9rtc/showcase_apaai_protocol_open_standard_for/</guid>
      <pubDate>Wed, 22 Oct 2025 14:27:07 GMT</pubDate>
    </item>
    <item>
      <title>高级文本操作 TextTool</title>
      <link>https://www.reddit.com/r/programming/comments/1od9n0r/advanced_text_manipulation_texttool/</link>
      <description><![CDATA[TextTool - 高级文本操作工具 TextTool 是一款功能强大的命令行工具，专为高级文本操作而设计。它允许用户通过多种功能加载、修改和保存文本文件或剪贴板内容，包括正则表达式支持、文本替换、行选择等。 功能  加载内容：从文件或剪贴板加载文本。 显示行：显示包含特定字符串或正则表达式模式的行。 选择行：根据特定条件（例如，包含或不包含字符串）选择行。 替换文本：用新文本替换字符串或正则表达式模式，包括对捕获组的支持。 保存内容：将修改后的文本保存到文件或覆盖原始文件。 还原 更改：撤消上次替换或选择操作。 正则表达式支持：所有命令都支持用于高级文本操作的正则表达式模式。 剪贴板集成：直接从剪贴板加载和保存内容。 历史记录：跨会话保留命令历史记录。 高级功能：包括提取电子邮件、URL、修剪空格、转换大小写等功能。  安装  确保安装了 Python 3.x。 使用 pip 安装所需的库： bash pip install cmd2 regex pandas win32clipboard   用法 使用Python运行脚本： bash python TextTool.py  主要命令  load ：加载文本  load：从剪贴板加载内容。 show ：显示包含指定字符串或正则表达式的行。 select ：选择包含指定字符串或正则表达式的行。 replace “字符串1” “string2”：将 string1 替换为 string2。 save ：将修改后的文本保存到指定文件。 save：用修改后的文本覆盖原始文件。 revert： 恢复上次替换或选择操作。 exit：退出工具。  示例 加载文件： bash TextTool&gt;加载“C:/example.txt”  显示包含“错误”的行： bash TextTool&gt;显示“错误”  将“错误”替换为带有“警告”： bash TextTool&gt;替换“错误” “警告”  保存修改后的文本： bash TextTool&gt;保存“C:/output.txt”  恢复上次操作： bash TextTool&gt; revert  高级功能 要启用高级功能，请使用advanced命令：bash TextTool&gt;高级  这将解锁其他命令，例如：  extract_emails：从文本中提取所有电子邮件地址。 extract_urls：从文本中提取所有 URL。 trim_whitespace：修剪每行的前导和尾随空格。 convert_case ：将文本转换为大写、小写或标题大小写。 reverse_lines：反转文本中的行顺序。  要禁用高级功能，请使用 standard 命令：bash TextTool&gt;标准 教程 要启动交互式教程，请键入：bash TextTool&gt;教程  本教程将通过实际示例引导您了解该工具的主要功能。 正则表达式备忘单 要显示正则表达式备忘单，请键入：bash TextTool&gt;; cheat_sheet_regex  这将提供常见正则表达式模式、量词、锚点、字符类、组和特殊字符的示例和解释。 贡献 欢迎贡献！请随时提交问题或拉取请求。 许可证 该项目已根据 MIT 许可证获得许可。有关详细信息，请参阅 LICENSE 文件。  使用 TextTool 进行愉快的文本处理！ 🚀   由   提交/u/TechnicianFit6533  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od9n0r/advanced_text_manipulation_texttool/</guid>
      <pubDate>Wed, 22 Oct 2025 14:22:01 GMT</pubDate>
    </item>
    <item>
      <title>Chatgpt Atlas 用例</title>
      <link>https://www.reddit.com/r/programming/comments/1od9ann/chatgpt_atlas_use_case/</link>
      <description><![CDATA[嗨， 我看到了 ChatGPT 的新浏览器的预告片，我注意到他们的一大“创新”是直接使用 AI 浏览网站的能力。 尽管其背后取得了技术成就，但我并不完全相信实际的用例。 所以我想知道 - 在什么类型的任务中，无论是日常任务还是日常任务 不是，人工智能驱动的自动导航真的有用吗？   由   提交/u/sangokuhomer  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od9ann/chatgpt_atlas_use_case/</guid>
      <pubDate>Wed, 22 Oct 2025 14:08:40 GMT</pubDate>
    </item>
    <item>
      <title>拥抱无服务器的复杂性 • Sheen Brisals</title>
      <link>https://www.reddit.com/r/programming/comments/1od7grg/embracing_complexity_in_serverless_sheen_brisals/</link>
      <description><![CDATA[ 由   提交 /u/goto-con   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od7grg/embracing_complexity_in_serverless_sheen_brisals/</guid>
      <pubDate>Wed, 22 Oct 2025 12:53:53 GMT</pubDate>
    </item>
    <item>
      <title>简化您的代码：功能核心、命令式外壳</title>
      <link>https://www.reddit.com/r/programming/comments/1od6z2h/simplify_your_code_functional_core_imperative/</link>
      <description><![CDATA[ 由   提交 /u/codingindoc   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od6z2h/simplify_your_code_functional_core_imperative/</guid>
      <pubDate>Wed, 22 Oct 2025 12:32:22 GMT</pubDate>
    </item>
    <item>
      <title>使用 Rust 响应服务器组件：P99 延迟比 Next.js 快 12 倍</title>
      <link>https://www.reddit.com/r/programming/comments/1od6vja/react_server_components_with_rust_12x_faster_p99/</link>
      <description><![CDATA[我构建了 Rari，一个带有 Rust 运行时的 React 框架。我们刚刚添加了适当的应用程序路由器支持、SSR 和正确的 RSC 语义。 结果： - 0.69 毫秒平均响应（比 Next.js 快 3.8 倍） - 20,226 请求/秒吞吐量（高 10.5 倍） - 负载下 4 毫秒 P99 延迟（快 12 倍） - 包小 68% 架构：默认情况下服务器组件，“使用客户端” 交互性，来自 Rust 运行时的真正 SSR。当您的实现符合 React 的设计理念时，性能自然会随之而来。 阅读全文：https://ryanskinner.com/posts/the-rari-ssr-breakthrough-12x-faster-10x-higher-throughput-than-nextjs 尝试一下：npm create rari-app@latest GitHub：https://github.com/rari-build/rari 所有基准测试：https://github.com/rari-build/benchmarks   由   提交/u/BadDogDoug  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od6vja/react_server_components_with_rust_12x_faster_p99/</guid>
      <pubDate>Wed, 22 Oct 2025 12:27:59 GMT</pubDate>
    </item>
    <item>
      <title>通过迭代器和转换器在 JavaScript 和 Clojure 中进行流数据转换</title>
      <link>https://www.reddit.com/r/programming/comments/1od6fbb/streamed_data_transformation_in_javascript_and/</link>
      <description><![CDATA[ 由   提交/u/roman01la  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od6fbb/streamed_data_transformation_in_javascript_and/</guid>
      <pubDate>Wed, 22 Oct 2025 12:07:04 GMT</pubDate>
    </item>
    <item>
      <title>立即备份您的 GitHub 存储库！</title>
      <link>https://www.reddit.com/r/programming/comments/1od5jl7/backup_your_github_repositories_now/</link>
      <description><![CDATA[ 由   提交 /u/adityathebe   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od5jl7/backup_your_github_repositories_now/</guid>
      <pubDate>Wed, 22 Oct 2025 11:22:45 GMT</pubDate>
    </item>
    <item>
      <title>我从头开始构建了“nanograd”，一个微型自动差分引擎，以了解 PyTorch 的工作原理。</title>
      <link>https://www.reddit.com/r/programming/comments/1od53mw/i_built_nanograd_a_tiny_autodiff_engine_from/</link>
      <description><![CDATA[ 由   提交/u/Savings_Delay_5357  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od53mw/i_built_nanograd_a_tiny_autodiff_engine_from/</guid>
      <pubDate>Wed, 22 Oct 2025 10:59:11 GMT</pubDate>
    </item>
    <item>
      <title>为什么大多数“人工智能框架”感觉像是在生产中崩溃的演示？</title>
      <link>https://www.reddit.com/r/programming/comments/1od4z6s/why_do_most_ai_frameworks_feel_like_demos_that/</link>
      <description><![CDATA[我最近测试了六种代理框架，它们都承诺可用于生产就绪的编排，但几乎没有一个能够在现实世界中扩展。 我见过的主要杀手：  Python 并发瓶颈 任务中的上下文丢失 高电压下的随机崩溃 I/O  感觉业界正在将编排视为胶水代码而不是系统问题。 我们一直在尝试基于 Rust 的运行时来正面解决这些问题（共享状态、无锁调度、断路器）。 如果您想了解幕后情况，请在此处查看：https://github.com/InfinitiBit/graphbit 您的看法是，AI 框架是否因为过于关注模型而不够关注基础设施而未能达到目标？   由   提交/u/imrul009  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od4z6s/why_do_most_ai_frameworks_feel_like_demos_that/</guid>
      <pubDate>Wed, 22 Oct 2025 10:52:12 GMT</pubDate>
    </item>
    <item>
      <title>我们来做个游戏吧！ 343：快滚</title>
      <link>https://www.reddit.com/r/programming/comments/1od4ulo/lets_make_a_game_343_the_squick_roll/</link>
      <description><![CDATA[ 由   提交/u/apeloverage  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od4ulo/lets_make_a_game_343_the_squick_roll/</guid>
      <pubDate>Wed, 22 Oct 2025 10:44:57 GMT</pubDate>
    </item>
    <item>
      <title>系统设计中的幂等性：完整示例</title>
      <link>https://www.reddit.com/r/programming/comments/1od451a/idempotency_in_system_design_full_example/</link>
      <description><![CDATA[ 由   提交/u/trolleid   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od451a/idempotency_in_system_design_full_example/</guid>
      <pubDate>Wed, 22 Oct 2025 10:03:09 GMT</pubDate>
    </item>
    <item>
      <title>我为 AI API 构建了一个开源反向代理（支持 OpenAI、Claude、Gemini...）</title>
      <link>https://www.reddit.com/r/programming/comments/1od3eww/i_built_an_opensource_reverse_proxy_for_ai_apis/</link>
      <description><![CDATA[嘿开发者！我这样做是为了简化通过单个网关代理多个 AI 模型端点的过程...   由   提交 /u/Tero_Box   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od3eww/i_built_an_opensource_reverse_proxy_for_ai_apis/</guid>
      <pubDate>Wed, 22 Oct 2025 09:17:49 GMT</pubDate>
    </item>
    <item>
      <title>Next.js App Router 一年了——我们为何继续前进</title>
      <link>https://www.reddit.com/r/programming/comments/1od38nd/one_year_with_nextjs_app_router_why_were_moving_on/</link>
      <description><![CDATA[ 由   提交/u/mistyharsh   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1od38nd/one_year_with_nextjs_app_router_why_were_moving_on/</guid>
      <pubDate>Wed, 22 Oct 2025 09:06:40 GMT</pubDate>
    </item>
    </channel>
</rss>