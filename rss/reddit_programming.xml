<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Tue, 21 Oct 2025 15:25:44 GMT</lastBuildDate>
    <item>
      <title>需要 Python 脚本帮助</title>
      <link>https://www.reddit.com/r/programming/comments/1ocf0sy/need_help_scripting_in_python/</link>
      <description><![CDATA[您好，我正在 abaqus 中进行异质力学测试（d 形、双轴十字形和 arcan）模拟，我需要绘制考虑所有样本表面的主应力和主应变曲线。 我已经有两个脚本，一个用于将结果从 abaqus 提取到 csv 文件，另一个用于将结果提取到 csv 文件。 组织它们，但对于其他变量，如力、位移等。 有人可以帮助我调整这些脚本以适应 Max.校长和最小。主应力和应变？  Python 脚本   由   提交/u/ExpertMatter479   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocf0sy/need_help_scripting_in_python/</guid>
      <pubDate>Tue, 21 Oct 2025 14:50:12 GMT</pubDate>
    </item>
    <item>
      <title>民意调查</title>
      <link>https://www.reddit.com/r/programming/comments/1ocewb2/survey/</link>
      <description><![CDATA[我需要大学调查的答案，谢谢（只有 6 个问题）   由   提交 /u/SCAR__v   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocewb2/survey/</guid>
      <pubDate>Tue, 21 Oct 2025 14:45:20 GMT</pubDate>
    </item>
    <item>
      <title>我的命令行：个人通用可定制 CLI 工具</title>
      <link>https://www.reddit.com/r/programming/comments/1ocesb3/my_command_line_a_personal_generic_customizable/</link>
      <description><![CDATA[⚡我构建了一个名为 mcl 的轻量级 CLI 工具，可以使用简单的 JSON 配置创建自定义终端快捷方式。它支持本地和全局命令，我最近用 Python 重写了它。 它是开源的，仍处于早期阶段 - 非常欢迎反馈！ ❤️ 🔗 GitHub：https://github.com/stramanu/mcl-tool   由   提交/u/EmanueleStrazzullo   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocesb3/my_command_line_a_personal_generic_customizable/</guid>
      <pubDate>Tue, 21 Oct 2025 14:40:53 GMT</pubDate>
    </item>
    <item>
      <title>将大 O 表示法应用于软件设计：改变复杂性</title>
      <link>https://www.reddit.com/r/programming/comments/1oceqo7/applying_big_o_notation_to_software_design_change/</link>
      <description><![CDATA[ 由   提交 /u/EgregorAmeriki   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oceqo7/applying_big_o_notation_to_software_design_change/</guid>
      <pubDate>Tue, 21 Oct 2025 14:39:05 GMT</pubDate>
    </item>
    <item>
      <title>Nemawashi 和会议元</title>
      <link>https://www.reddit.com/r/programming/comments/1oceprq/nemawashi_and_the_meta_of_meetings/</link>
      <description><![CDATA[我认为这是一种破坏技术决策的模式：我们把会议变成了机智的角斗比赛，而不是深思熟虑的解决问题。 Nemawashi，“扭转根源”，是对此的一种回避。  通过一对一的预先社交决策。让人们在正式会议之前私下思考、检查数据并达成共识。人们在私下思考得更好，而不是在别人面前表现时。  从那时起，我不再将会议视为快速思考的场所，而是开始重视准备工作。喝咖啡聊天，共享数据，安静的思考。它速度较慢，但​​会带来更好的决策和更少的怨恨。   由   提交 /u/GeneralZiltoid   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oceprq/nemawashi_and_the_meta_of_meetings/</guid>
      <pubDate>Tue, 21 Oct 2025 14:38:04 GMT</pubDate>
    </item>
    <item>
      <title>在 AWS 停机时保持应用程序运行 |重申</title>
      <link>https://www.reddit.com/r/programming/comments/1ocebil/keep_your_applications_running_while_aws_is_down/</link>
      <description><![CDATA[TL;DR: 我们展示 Restate 如何将异地复制从复杂的分布式系统挑战转变为简单的部署配置。通过模拟 AWS 区域故障进行测试 - 零停机时间，60 秒内自动故障转移。 大家好！作者在此。 AWS 最近的 us-east-1 宕机导致 ChatGPT、Snapchat 和 Perplexity 瘫痪，这让我想起了我们写这篇文章的原因。 问题： 构建真正的地理复制应用程序传统上非常困难。您需要：  处理分布式状态管理和 CAP 定理权衡 实现复杂的复制逻辑和冲突解决 管理领导者选举和网络分区 使用自定义重试逻辑重构应用程序代码  大多数公司要么跳过它（并在中断期间遭受损失），要么投入整个团队来解决  我们的方法： 通过Restate，异地复制成为部署问题而不是应用程序开发问题。您编写正常的业务逻辑，无需特殊的分布式系统代码。然后，您可以使用以下配置进行跨区域部署： default-replication = &quot;{region: 2, node: 3}&quot; 这可确保您的数据复制到至少 2 个不同的区域和 3 个不同的节点。这使您的应用程序能够容忍区域中断或丢失两个任意节点而不会出现不可用情况。 测试： 我们跨 3 个 AWS 区域（us-east-1、us-east-2、us-west-1）部署了一个 6 节点 Restate 集群。在 400 个请求/秒负载和约 350 毫秒 P50 延迟的情况下，我们模拟了完整的 us-east-1 区域故障。 结果：  ✅ 零停机时间 ✅ 自动故障转移在 60 秒内完成 ✅ 所有请求继续处理（没有丢弃请求） ✅ 无数据丢失或重复 请求 ✅ 只有 1% 的请求在故障转移期间出现临时延迟峰值 ✅ 当区域“恢复”时，自动重新平衡，无需手动干预  博文包括：  完整的订单工作流程代码示例（剧透：它看起来像正常代码） 多区域部署的完整节点配置示例 显示稳定状态、故障转移和恢复的延迟图 解释架构图 它是如何工作的  很高兴回答有关该方法或实现的任何问题！   由   提交 /u/stsffap   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocebil/keep_your_applications_running_while_aws_is_down/</guid>
      <pubDate>Tue, 21 Oct 2025 14:22:31 GMT</pubDate>
    </item>
    <item>
      <title>工程就是科学就是工程</title>
      <link>https://www.reddit.com/r/programming/comments/1oce4m3/engineering_is_science_is_engineering/</link>
      <description><![CDATA[我一直在思考现在的软件工程有多么像科学工作——实验、建模、迭代。我试图在一篇文章中探讨这种重叠，很想听听这是否与您的经历产生共鸣。   由   提交 /u/Tiendil   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oce4m3/engineering_is_science_is_engineering/</guid>
      <pubDate>Tue, 21 Oct 2025 14:14:49 GMT</pubDate>
    </item>
    <item>
      <title>URLPattern 现已成为 Baseline 全新可用</title>
      <link>https://www.reddit.com/r/programming/comments/1ocdsc8/urlpattern_is_now_baseline_newly_available/</link>
      <description><![CDATA[ 由   提交/u/feross  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocdsc8/urlpattern_is_now_baseline_newly_available/</guid>
      <pubDate>Tue, 21 Oct 2025 14:01:17 GMT</pubDate>
    </item>
    <item>
      <title>用 Java 设计和实现 URL 缩短器</title>
      <link>https://www.reddit.com/r/programming/comments/1ocbuto/designing_and_implementing_a_url_shortener_in_java/</link>
      <description><![CDATA[在本文中，我探索了使用 Dropwizard 框架设计 URL 缩短器及其在 Java 中的实现。请随意查看！   由   提交/u/kishunkumaar   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocbuto/designing_and_implementing_a_url_shortener_in_java/</guid>
      <pubDate>Tue, 21 Oct 2025 12:40:44 GMT</pubDate>
    </item>
    <item>
      <title>我构建了 ZAI CLI - Z.ai 的 GLM 模型的终端界面（具有 GLM 特定功能的 grok-cli 的分支）</title>
      <link>https://www.reddit.com/r/programming/comments/1ocbidd/i_built_zai_cli_a_terminal_interface_for_zais_glm/</link>
      <description><![CDATA[大家好！ 👋 我一直在开发 ZAI CLI - 一种对话式 AI 工具，可将 Z.ai 的 GLM 模型直接引入您的终端。我分叉了 superagent-ai 出色的 grok-cli，并针对 Z.ai GLM 生态系统进行了大量定制。 GitHub：https://github.com/guizmo-ai/zai-glm-clinpm: npm install -g u/guizmo-ai/zai-cli 它的作用： - 交互式首次运行向导（无配置问题） - 自然文件操作 - 只需询问即可读取/写入/编辑 文件 - 支持 GLM-4.6 的 200K 上下文窗口 - 思考模式 - 通过问题实时观察 AI 推理🧠 - 会话持久性 - 保存和恢复对话 - 用于扩展功能的 MCP 服务器集成 为什么我构建这个： 我喜欢 grok-cli 方法，但想要一些专门针对该问题进行优化的方法 Z.ai 的 GLM 模型。提示、上下文处理和 UI 都是为 GLM-4.6、4.5 和 4.5-Air 量身定制的。 思维模式特别酷 - 您可以从字面上看到模型的推理过程展开。对于理解 GLM 如何处理复杂编码非常有帮助 问题。 技术堆栈： - 用于终端 UI 的 TypeScript + React Ink - 使用 Vitest 进行 90 多次测试 - 键入错误系统并提供有用的建议 - 文件监视、批量编辑、指标跟踪 大力支持 superagent-ai 是最初的 grok-cli 基础。我保留了核心架构，并在其上构建了特定于 GLM 的功能。 它已获得 MIT 许可，并为社区构建。尝试一下，让我知道您的想法！ 始终欢迎反馈、PR 或只是讨论 AI 工具。 安装： npm install -g u/guizmo-ai/zai-cli zai # 就是这样！   由   提交/u/National_Western7334   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocbidd/i_built_zai_cli_a_terminal_interface_for_zais_glm/</guid>
      <pubDate>Tue, 21 Oct 2025 12:24:52 GMT</pubDate>
    </item>
    <item>
      <title>Pasta/80 是一个针对 Z80 微处理器的简单 Pascal 交叉编译器</title>
      <link>https://www.reddit.com/r/programming/comments/1ocbg19/pasta80_is_a_simple_pascal_cross_compiler/</link>
      <description><![CDATA[ 由   提交/u/mariuz  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocbg19/pasta80_is_a_simple_pascal_cross_compiler/</guid>
      <pubDate>Tue, 21 Oct 2025 12:21:47 GMT</pubDate>
    </item>
    <item>
      <title>Walrus：根据第一原理构建的高性能存储引擎</title>
      <link>https://www.reddit.com/r/programming/comments/1ocb0w2/walrus_a_high_performance_storage_engine_built/</link>
      <description><![CDATA[嗨，最近我一直在 Rust 中开发一个名为 Walrus 的高性能存储引擎， 稍微介绍一下，Walrus 是一个根据第一原理构建的嵌入式进程内存储引擎，可以用作开箱即用的构建块：  Timeseries 事件日志：不可变的审计跟踪、合规性 追踪。每个事件都会立即保留，只读取一次。 数据库 WAL：PostgreSQL 样式事务日志。提交的最大持久性、确定性的崩溃恢复。 消息队列：Kafka 风格的流。批量写入（最多2000个条目），高吞吐量，至少一次交付。 键值存储：简单的持久缓存。每个键都是一个主题，50ms fsync 窗口快速写入。 任务队列：异步作业处理。至少使用重试安全工作人员进行一次交付（处理程序应该是幂等的）。 ...以及更多  最近的版本在其选择的工作负载（存储库中的基准）上优于单节点 apache kafka 和rocksdb 存储库：https://github.com/nubskr/walrus 如果您有兴趣了解 walrus 的内部结构，这两个发布帖子将为您提供所需的一切：  v0.1.0 发布帖子：https://nubskr.com/2025/10/06/walrus（是的，一开始应该是预写日志） v0.2.0 发布帖子：https://nubskr.com/2025/10/20/walrus_v0.2.0  我期待听到社区的反馈，海象的“分布式”版本的工作正在进行中。   由   提交 /u/Ok_Marionberry8922   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocb0w2/walrus_a_high_performance_storage_engine_built/</guid>
      <pubDate>Tue, 21 Oct 2025 12:01:32 GMT</pubDate>
    </item>
    <item>
      <title>关注产品创意，而不是需求：构建灵活的软件设计</title>
      <link>https://www.reddit.com/r/programming/comments/1ocaxpb/focus_on_product_ideas_not_requirements_building/</link>
      <description><![CDATA[ 由   提交/u/teivah  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocaxpb/focus_on_product_ideas_not_requirements_building/</guid>
      <pubDate>Tue, 21 Oct 2025 11:57:18 GMT</pubDate>
    </item>
    <item>
      <title>Constant Database（djb 的 cdb）：具有 cdb64 支持和打包文档的新版本</title>
      <link>https://www.reddit.com/r/programming/comments/1ocam91/constant_database_djbs_cdb_a_new_release_with/</link>
      <description><![CDATA[ 由   提交/u/self  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocam91/constant_database_djbs_cdb_a_new_release_with/</guid>
      <pubDate>Tue, 21 Oct 2025 11:40:44 GMT</pubDate>
    </item>
    <item>
      <title>WLJS Notebook 中的基本操作和混合高斯 Splats 🫟</title>
      <link>https://www.reddit.com/r/programming/comments/1ocacik/basic_manipulation_mixing_gaussian_splats_in_wljs/</link>
      <description><![CDATA[在类似 Jupyter 的笔记本中使用高斯图非常有趣。特别是如果您需要快速执行某些操作并分享结果   由   提交/u/Inst2f  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocacik/basic_manipulation_mixing_gaussian_splats_in_wljs/</guid>
      <pubDate>Tue, 21 Oct 2025 11:26:08 GMT</pubDate>
    </item>
    </channel>
</rss>