<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Fri, 24 Oct 2025 12:52:14 GMT</lastBuildDate>
    <item>
      <title>AI 将开发项目从 6 个月缩短到 5 天——自动化的有趣尝试</title>
      <link>https://www.reddit.com/r/programming/comments/1oewv50/ai_cutting_dev_projects_from_6_months_to_5_days/</link>
      <description><![CDATA[看到这篇关于 AI 处理重复性 80% 开发的文章 工作（身份验证、数据库设置、基础设施），以便开发人员可以专注于实际功能。 前提：人工智能无需在样板文件上花费数月时间，而是在几天内即可生成可用于生产的基础。让我想起从编写汇编语言到使用高级语言的转变。 很好奇人们如何看待这种速度与“神奇的黑匣子”？权衡。   由   提交 /u/Feeling_Sir2010   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oewv50/ai_cutting_dev_projects_from_6_months_to_5_days/</guid>
      <pubDate>Fri, 24 Oct 2025 12:50:03 GMT</pubDate>
    </item>
    <item>
      <title>寻找软件工程的论文思路</title>
      <link>https://www.reddit.com/r/programming/comments/1oewj6a/looking_for_thesis_ideas_in_software_engineering/</link>
      <description><![CDATA[我是一名软件工程专业的学生，​​目前正在为我的论文寻找灵感。   由   提交/u/ViewCautious3595   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oewj6a/looking_for_thesis_ideas_in_software_engineering/</guid>
      <pubDate>Fri, 24 Oct 2025 12:34:56 GMT</pubDate>
    </item>
    <item>
      <title>Blazed.js</title>
      <link>https://www.reddit.com/r/programming/comments/1oewj0b/blazedjs/</link>
      <description><![CDATA[嘿，大家好，我想向你们介绍我的库 blazed.js， 这是一个用于 Nodejs 的快速简约 http 客户端， 如果你们能尝试一下，并就我可以进一步改进的地方发送宝贵的反馈意见，我将不胜感激？ 自去年以来一直在维护它，所以它就这样了 自第一个版本以来，通过了很多内部结构 ngl  提前致谢：D   由   提交/u/Flat_Molasses_9715   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oewj0b/blazedjs/</guid>
      <pubDate>Fri, 24 Oct 2025 12:34:43 GMT</pubDate>
    </item>
    <item>
      <title>我的 CI 构建中的幻影引用之谜</title>
      <link>https://www.reddit.com/r/programming/comments/1oew0ul/the_mystery_of_the_phantom_quote_in_my_ci_builds/</link>
      <description><![CDATA[ 由   提交 /u/_shadowbannedagain   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oew0ul/the_mystery_of_the_phantom_quote_in_my_ci_builds/</guid>
      <pubDate>Fri, 24 Oct 2025 12:10:43 GMT</pubDate>
    </item>
    <item>
      <title>谷歌的 Quantum Echo 算法展示了世界上第一个量子计算的实际应用——Willow 105 量子位芯片运行算法的速度比超级计算机快 13,000 倍</title>
      <link>https://www.reddit.com/r/programming/comments/1oevgaz/googles_quantum_echo_algorithm_shows_worlds_first/</link>
      <description><![CDATA[ 由   提交/u/donutloop  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oevgaz/googles_quantum_echo_algorithm_shows_worlds_first/</guid>
      <pubDate>Fri, 24 Oct 2025 11:42:22 GMT</pubDate>
    </item>
    <item>
      <title>F-Droid 和 Google 的开发者注册法令</title>
      <link>https://www.reddit.com/r/programming/comments/1oev552/fdroid_and_googles_developer_registration_decree/</link>
      <description><![CDATA[ 由   提交 /u/alexeyr   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oev552/fdroid_and_googles_developer_registration_decree/</guid>
      <pubDate>Fri, 24 Oct 2025 11:25:44 GMT</pubDate>
    </item>
    <item>
      <title>堆叠差异 - 简单解释</title>
      <link>https://www.reddit.com/r/programming/comments/1oeu74t/stacked_diffs_simply_explained/</link>
      <description><![CDATA[ 由   提交/u/sdxyz42  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oeu74t/stacked_diffs_simply_explained/</guid>
      <pubDate>Fri, 24 Oct 2025 10:32:52 GMT</pubDate>
    </item>
    <item>
      <title>为什么渠道无法解释用户行为（以及我们构建的内容）</title>
      <link>https://www.reddit.com/r/programming/comments/1oeu3g6/why_funnels_fail_to_explain_user_behavior_and/</link>
      <description><![CDATA[去年花了一年时间从头开始构建用户分析。问题是：传统渠道假设用户沿直线移动。现实？它们会返回、跳过步骤、走上你从未设计过的路径。 Built Grain 可以实时重建实际旅程。以下是我们了解到的内容： 隐藏模式问题： 大多数分析都会向您显示预定义的渠道（步骤 A → 步骤 B → 步骤 C）。但用户不会遵循你的心理模型。他们： - 进展后返回到先前的步骤 - 通过意想不到的序列发现捷径 - 专注于“中心”您未设计为中心的事件 - 在聚合数据中不明显的特定时刻放弃 技术方法： - Cassandra + ClickHouse 后端用于快速摄取和查询 - 从任何开始事件到任何目标的旅程重建 - 可视化路径分析显示主要路线、中心和之前的最后步骤 drop-off - 内置远程配置（无需部署即可翻转变体/变量） - 同意感知 SDK（无需 GDPR/CCPA 的非必要存储预先同意） 不同之处： 你问“用户如何从注册到获得第一个价值？”该系统重建真实路径，显示循环和死胡同，并让您通过远程配置立即响应。 今天在 ProductHunt 上启动。发布时仅限网络（保持范围紧凑）。 grainql.com 上的演示展示了真实的旅程重建。 很高兴回答有关架构或方法的技术问题。另外很好奇：如果您现在正在跟踪用户行为，您当前的堆栈会错过哪些模式？   由   提交/u/Prestigious-Street25   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oeu3g6/why_funnels_fail_to_explain_user_behavior_and/</guid>
      <pubDate>Fri, 24 Oct 2025 10:26:41 GMT</pubDate>
    </item>
    <item>
      <title>WebFragments：一种新的微前端方法（来自 Angular 的共同创建者和 Microsoft DX 的负责人）</title>
      <link>https://www.reddit.com/r/programming/comments/1oeryvj/webfragments_a_new_approach_to_microfrontends/</link>
      <description><![CDATA[大家好👋 刚刚发布了新的 Señors @ Scale 剧集，我认为任何从事大型前端平台或微前端工作的人都会感兴趣。 我与 Igor Minar（Angular 联合创始人，现供职于 Cloudflare）和 Natalia 坐下来。 Venditto（微软 JavaScript 开发者体验首席 PM）谈论 WebFragments — 一种构建实际可扩展的模块化前端的新方法。 想法： → 每个微前端都在自己独立的 JavaScript 上下文中运行（就像浏览器的 Docker） → DOM 使用 Shadow DOM 进行虚拟化，而不是使用 Shadow DOM 进行虚拟化。 iframes → 片段保持独立，但呈现为一个无缝应用程序 → 它与框架无关 - React、Vue、Qwik、Angular…都可以工作 他们还分享了 Cloudflare 如何使用 WebFragments 已经迁移其生产仪表板 - 逐步增量，而不破坏现有平台。   由   提交/u/cresta29  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oeryvj/webfragments_a_new_approach_to_microfrontends/</guid>
      <pubDate>Fri, 24 Oct 2025 08:08:28 GMT</pubDate>
    </item>
    <item>
      <title>如何选择正确的机器学习算法</title>
      <link>https://www.reddit.com/r/programming/comments/1oerpgv/how_to_choose_the_right_machine_learning_algorithm/</link>
      <description><![CDATA[ 由   提交 /u/CockroachFair4921   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oerpgv/how_to_choose_the_right_machine_learning_algorithm/</guid>
      <pubDate>Fri, 24 Oct 2025 07:51:20 GMT</pubDate>
    </item>
    <item>
      <title>java 有多快？教老狗新把戏</title>
      <link>https://www.reddit.com/r/programming/comments/1oemcaj/how_fast_is_java_teaching_an_old_dog_new_tricks/</link>
      <description><![CDATA[ 由   提交 /u/BlueGoliath   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oemcaj/how_fast_is_java_teaching_an_old_dog_new_tricks/</guid>
      <pubDate>Fri, 24 Oct 2025 02:35:32 GMT</pubDate>
    </item>
    <item>
      <title>《瓦尔哈拉》抢先体验版本 2 (JEP 401)</title>
      <link>https://www.reddit.com/r/programming/comments/1oem9on/valhalla_earlyaccess_build_2_jep_401/</link>
      <description><![CDATA[ 由   提交/u/BlueGoliath  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oem9on/valhalla_earlyaccess_build_2_jep_401/</guid>
      <pubDate>Fri, 24 Oct 2025 02:31:57 GMT</pubDate>
    </item>
    <item>
      <title>Rust coreutils 重写中的错误会破坏 Ubuntu 25.10 中的自动更新</title>
      <link>https://www.reddit.com/r/programming/comments/1oeiulp/bug_in_rust_coreutils_rewrite_breaks_automatic/</link>
      <description><![CDATA[通过 Canonical：  某些 Ubuntu 25.10 系统无法自动检查可用软件 更新。受影响的计算机包括云部署、容器映像、Ubuntu 桌面和 Ubuntu Server 安装。  该问题是由基于 Rust 的 coreutils 重写 (uutils) 中的错误引起的，其中 date 忽略 -r/--reference=file 参数。这用于打印文件的mtime而不是显示系统的当前日期/时间。虽然对参数的支持于 9 月 12 日添加到 uutils，但 Ubuntu 25.10 附带的实际 uutils 版本早于此更改。 奇怪的是，该标志包含在 uutils 的参数解析器中，但实际上并未连接到任何逻辑， 解释为什么 Ubuntu 的更新检测逻辑默默地失败，而不是因无效标志而出错。   由   提交/u/cachemissed  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oeiulp/bug_in_rust_coreutils_rewrite_breaks_automatic/</guid>
      <pubDate>Thu, 23 Oct 2025 23:43:42 GMT</pubDate>
    </item>
    <item>
      <title>测试已覆盖但从未使用过？你可能正在解决错误的问题</title>
      <link>https://www.reddit.com/r/programming/comments/1oeflks/test_covered_but_never_used_you_may_be_solving/</link>
      <description><![CDATA[ 由   提交/u/dmp0x7c5  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oeflks/test_covered_but_never_used_you_may_be_solving/</guid>
      <pubDate>Thu, 23 Oct 2025 21:21:41 GMT</pubDate>
    </item>
    <item>
      <title>开发人员仅花费 1% 的编码时间使用 VS Code 的调试器（分析了 11,805 个会话）</title>
      <link>https://www.reddit.com/r/programming/comments/1oe8tc5/developers_spend_just_1_of_coding_time_using_vs/</link>
      <description><![CDATA[ 由   提交/u/Equivalent-Yak2407   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oe8tc5/developers_spend_just_1_of_coding_time_using_vs/</guid>
      <pubDate>Thu, 23 Oct 2025 17:02:22 GMT</pubDate>
    </item>
    </channel>
</rss>