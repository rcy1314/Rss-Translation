<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Wed, 22 Oct 2025 03:48:28 GMT</lastBuildDate>
    <item>
      <title>SevenDB：反应式但可扩展</title>
      <link>https://www.reddit.com/r/programming/comments/1ocxmao/sevendb_reactive_yet_scalable/</link>
      <description><![CDATA[大家好，我一直在开发一个名为 SevenDB 的项目，这是一个反应式数据库系统，可直接在核心内部实现可扩展、确定性的复制（无需外部流处理器或协调层）。 这个想法是使复制和事件发射严格线性化 - 这意味着每个节点都以相同的顺序重播相同的操作， 没有时间异常。我们还在尝试使用集合点散列的解耦通知者选举协议，以便订阅者通过即时故障转移获得实时更新。 希望从数据库迷或分布式系统人员那里获得一些反馈或棘手问题 - 特别是在复制设计、确定性权衡或实际用例方面。 很高兴分享有关架构或早期基准的更多信息，如果 人们很好奇。我已经在存储库中共享了设计文档。   由   提交 /u/shashanksati   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocxmao/sevendb_reactive_yet_scalable/</guid>
      <pubDate>Wed, 22 Oct 2025 03:29:32 GMT</pubDate>
    </item>
    <item>
      <title>对于快速发展的 SaaS 团队来说，“设计安全”到底是什么样的？</title>
      <link>https://www.reddit.com/r/programming/comments/1ocvxji/what_does_securebydesign_really_look_like_for/</link>
      <description><![CDATA[对于快速发展的 SaaS 团队来说，“安全设计”到底是什么样的？ 大家好， 我一直在深入研究 SaaS 团队如何平衡速度、合规性和可扩展性 - 我很好奇其他人是如何解决这个问题的。 “从一开始就构建安全性”说起来很容易，但实际上，早期团队经常要兼顾有限的时间、预算和相互竞争的优先事项。 我一直在思考的几个问题：  如何将安全性嵌入到 SaaS 架构中而不减慢交付速度？ 尽早赢得企业或受监管买家信任的最有效方法是什么  你们中有人实施过政策即代码或自动合规框架吗？进展如何？ 如果您必须重新开始，您会做出哪些不同的安全或基础设施选择？  我读了很多关于设计安全基础设施如何通过减少摩擦、自动化合规性和缩短企业销售周期来实际提高开发人员速度（而不是减慢速度）的内容。这是一个有趣的观点，颠覆了速度和安全性之间的通常权衡。 如果您有兴趣更深入地探索该主题，这里有一本很棒的免费电子书： 👉  https://nxt1.cloud/download-free-ebook-secure-by-design-saas/?utm_medium=social&amp;utm_source=reddit&amp;utm_content=secure-saas-ebook 很想听听您的团队如何在速度、安全性和可扩展性之间实现平衡，尤其是在快速增长的 SaaS 环境中。   由   提交/u/Motor-Alfalfa-3287   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocvxji/what_does_securebydesign_really_look_like_for/</guid>
      <pubDate>Wed, 22 Oct 2025 02:06:08 GMT</pubDate>
    </item>
    <item>
      <title>我是一名色盲开发人员 - 请停止让红色和绿色完成所有工作。</title>
      <link>https://www.reddit.com/r/programming/comments/1ocuqq0/im_a_developer_whos_colorblind_please_stop_making/</link>
      <description><![CDATA[使您的 UI 色盲友好大约需要五分钟 — 或者大约在同一时间您会想知道为什么这么多用户总是按错按钮。我可能是那些烦人的用户之一，因为我是色盲。您曾经经历过——痴迷于像素对齐或重构除了编译器之外没有人关心的函数。但是，当涉及到检查错误和成功消息对于色盲用户来说是否相同时？突然没有时间了。事实证明，十二分之一的人无法区分“严重红色警报”和“成功绿色横幅”。这就像发布一个应用程序时，8% - 10% 的用户会随机出现异常……视觉上。踢球者？修复它不需要重构、框架或祈祷——只需要一点点深思熟虑和一点点预先的努力。 * 切勿仅依赖颜色。 * 添加图标、标签或任何其他提示。 * 使用内置滤色器进行测试（例如，macOS → 辅助功能 → 显示）。我整理了一个符合 WCAG 2.1 的快速 Markdown 参考指南，作为在 Xcode/Swift 中应用色盲友好规则的简单规则和示例，但它适用于任何堆栈：👉 色盲辅助功能指南 TL;DR：您不会将关键信息隐藏在功能标志后面。也不要将其隐藏在颜色后面。 🎨   由   提交/u/typoprophet101   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocuqq0/im_a_developer_whos_colorblind_please_stop_making/</guid>
      <pubDate>Wed, 22 Oct 2025 01:09:30 GMT</pubDate>
    </item>
    <item>
      <title>高级自我意识教育版(1)</title>
      <link>https://www.reddit.com/r/programming/comments/1ocrfq2/advanced_selfaware_ed1/</link>
      <description><![CDATA[ 由   提交/u/aartaka  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocrfq2/advanced_selfaware_ed1/</guid>
      <pubDate>Tue, 21 Oct 2025 22:41:13 GMT</pubDate>
    </item>
    <item>
      <title>为什么人工智能编码在企业团队中仍然失败</title>
      <link>https://www.reddit.com/r/programming/comments/1ocqcri/why_ai_coding_still_fails_in_enterprise_teams/</link>
      <description><![CDATA[我们请 Thoughtworks 的 Kent Beck、Bryan Finster、Rahib Amin 和 Punit Lad 分享他们对企业 AI 编码的想法。 他们所说的内容与最近在 Reddit 上分享的“我们如何在 FAANG 进行编码”帖子中分享的内容类似 - 未来属于有纪律的、上下文感知的开发，其中规范、 多人游戏工作流程和组织信任比更快地生成更多代码更重要。   由   提交/u/aviator_co   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocqcri/why_ai_coding_still_fails_in_enterprise_teams/</guid>
      <pubDate>Tue, 21 Oct 2025 21:56:46 GMT</pubDate>
    </item>
    <item>
      <title>iRonic：Meta 成为了它所抗争的对象</title>
      <link>https://www.reddit.com/r/programming/comments/1ocq7bl/ironic_meta_became_what_it_fought/</link>
      <description><![CDATA[WhatsApp 禁止通用人工智能助手的新 Business API 规则揭示了 Meta 的类似苹果的转变。这篇博文讨论了这一消息、Meta 的推理、平台控制的最新历史，以及这对早期初创公司的影响。   由   提交/u/ma08  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocq7bl/ironic_meta_became_what_it_fought/</guid>
      <pubDate>Tue, 21 Oct 2025 21:50:45 GMT</pubDate>
    </item>
    <item>
      <title>RestClient.Net 7：编译时安全和 OpenAPI MCP 生成</title>
      <link>https://www.reddit.com/r/programming/comments/1ocpi83/restclientnet_7_compiletime_safety_and_openapi/</link>
      <description><![CDATA[.NET 中 REST 调用的编译时安全性，以及从 OpenAPI 文档生成 MCP 服务器！   由   提交/u/emanresu_2017   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocpi83/restclientnet_7_compiletime_safety_and_openapi/</guid>
      <pubDate>Tue, 21 Oct 2025 21:23:26 GMT</pubDate>
    </item>
    <item>
      <title>为什么 Git 的 HEAD 不是大多数开发人员想象的那样</title>
      <link>https://www.reddit.com/r/programming/comments/1ocm5vj/why_gits_head_isnt_what_most_developers_think_it/</link>
      <description><![CDATA[就微妙的 Git 概念编写了一个简短的解释 - HEAD（您当前的提交指针）和分支头 (.git/refs/heads/) 之间的区别。 它使用简单的示例来说明为什么“分离的 HEAD”不是错误以及引用实际上如何移动。   由   提交/u/sshetty03  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocm5vj/why_gits_head_isnt_what_most_developers_think_it/</guid>
      <pubDate>Tue, 21 Oct 2025 19:17:20 GMT</pubDate>
    </item>
    <item>
      <title>用记录器替换了所有 System.out.println() - 感觉就像是专业升级</title>
      <link>https://www.reddit.com/r/programming/comments/1oclw5e/replaced_all_systemoutprintln_with_a_logger_and/</link>
      <description><![CDATA[我终于将我的小型 Spring Core 项目从使用 System.out.println() 切换到使用 SLF4J with Logback 进行日志记录。 差别是白天和黑夜。 现在我可以控制日志级别、格式输出，甚至按环境分离日志 - 所有这些都无需触及代码。 我意识到为什么真正的生产应用程序从不依赖println。 对于任何刚刚起步的人来说：尽早切换到记录器是立即让您的项目感觉更易于维护的小步骤之一。 好奇 - 您在 Java 项目中更喜欢哪种日志记录设置？普通 SLF4J + Logback，还是 Log4j2？   由   提交/u/AyouboXx  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oclw5e/replaced_all_systemoutprintln_with_a_logger_and/</guid>
      <pubDate>Tue, 21 Oct 2025 19:07:19 GMT</pubDate>
    </item>
    <item>
      <title>建立您自己的数据库</title>
      <link>https://www.reddit.com/r/programming/comments/1ocl9ko/build_your_own_database/</link>
      <description><![CDATA[ 由   提交/u/iamkeyur   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocl9ko/build_your_own_database/</guid>
      <pubDate>Tue, 21 Oct 2025 18:44:34 GMT</pubDate>
    </item>
    <item>
      <title>Alexander Stathis：在 AngelList 上扩展模块化 Rails 整体 - On Rails</title>
      <link>https://www.reddit.com/r/programming/comments/1ockyqe/alexander_stathis_scaling_a_modular_rails/</link>
      <description><![CDATA[ 由   提交 /u/robbyrussell   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ockyqe/alexander_stathis_scaling_a_modular_rails/</guid>
      <pubDate>Tue, 21 Oct 2025 18:33:27 GMT</pubDate>
    </item>
    <item>
      <title>为什么 Postgres FDW 让我的查询变慢（以及我如何修复它）|斯维克斯博客</title>
      <link>https://www.reddit.com/r/programming/comments/1ock2c4/why_postgres_fdw_made_my_queries_slow_and_how_i/</link>
      <description><![CDATA[ 由   提交/u/j_platte  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ock2c4/why_postgres_fdw_made_my_queries_slow_and_how_i/</guid>
      <pubDate>Tue, 21 Oct 2025 18:00:29 GMT</pubDate>
    </item>
    <item>
      <title>只需 8 个简单步骤即可将 VIM 转换为代码编辑器 - 适合初学者</title>
      <link>https://www.reddit.com/r/programming/comments/1ocj0l5/convert_vim_to_code_editor_in_8_easy_steps/</link>
      <description><![CDATA[ 由   提交/u/Sushant098123  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ocj0l5/convert_vim_to_code_editor_in_8_easy_steps/</guid>
      <pubDate>Tue, 21 Oct 2025 17:21:37 GMT</pubDate>
    </item>
    <item>
      <title>最近科技公司裁员的真正原因是什么？这不是人工智能。</title>
      <link>https://www.reddit.com/r/programming/comments/1ociu41/the_real_reason_for_recent_tech_layoffs_its_not_ai/</link>
      <description><![CDATA[裁员在科技界并不是什么新鲜事。但最近，每份新闻稿中都出现了一条新的台词——一个闪亮的、未来主义的理由：人工智能。   由   提交/u/nullstillstands  [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ociu41/the_real_reason_for_recent_tech_layoffs_its_not_ai/</guid>
      <pubDate>Tue, 21 Oct 2025 17:14:52 GMT</pubDate>
    </item>
    <item>
      <title>连接池耗尽：无声的杀手</title>
      <link>https://www.reddit.com/r/programming/comments/1ochumi/connection_pool_exhaustion_the_silent_killer/</link>
      <description><![CDATA[为什么这很重要 连接池是现代应用程序重用昂贵的网络套接字而不是为每个请求创建新的网络套接字的方式。只要连接快速循环，包含 50 个连接的池就可以处理数百万个请求。但一旦连接卡住（查询缓慢、网络挂起、死锁），池就会缩小。当它达到零时，你不仅变慢了，而且还变慢了。你死定了。 现实世界：LinkedIn 经历了 4 小时的中断，当时存储过程变得缓慢，一直保持连接直到池耗尽。当下游服务变得缓慢、连接不足并阻止所有交易时，Stripe 就会出现级联支付失败的情况。这些不是容量问题；而是容量问题。它们是循环问题。    由   提交/u/Extra_Ear_10   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ochumi/connection_pool_exhaustion_the_silent_killer/</guid>
      <pubDate>Tue, 21 Oct 2025 16:37:26 GMT</pubDate>
    </item>
    </channel>
</rss>