<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：编程</title>
    <link>https://www.reddit.com/r/programming/new</link>
    <description>计算机编程</description>
    <lastBuildDate>Sat, 25 Oct 2025 21:21:11 GMT</lastBuildDate>
    <item>
      <title>Synadia 和 TigerBeetle 承诺向 Zig 软件基金会捐赠 512,000 美元</title>
      <link>https://www.reddit.com/r/programming/comments/1og1nyq/synadia_and_tigerbeetle_pledge_512000_to_the_zig/</link>
      <description><![CDATA[ 由   提交 /u/matklad   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1og1nyq/synadia_and_tigerbeetle_pledge_512000_to_the_zig/</guid>
      <pubDate>Sat, 25 Oct 2025 20:23:44 GMT</pubDate>
    </item>
    <item>
      <title>main() 之前的旅程</title>
      <link>https://www.reddit.com/r/programming/comments/1og1gl4/the_journey_before_main/</link>
      <description><![CDATA[ 由   提交/u/VortexGames  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1og1gl4/the_journey_before_main/</guid>
      <pubDate>Sat, 25 Oct 2025 20:15:03 GMT</pubDate>
    </item>
    <item>
      <title>具体类型具有更好的可维护性</title>
      <link>https://www.reddit.com/r/programming/comments/1og076s/concrete_types_yield_better_maintainability/</link>
      <description><![CDATA[ 由   提交 /u/alefore   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1og076s/concrete_types_yield_better_maintainability/</guid>
      <pubDate>Sat, 25 Oct 2025 19:23:10 GMT</pubDate>
    </item>
    <item>
      <title>打印功能有什么作用？</title>
      <link>https://www.reddit.com/r/programming/comments/1ofz4hk/what_does_print_function_do/</link>
      <description><![CDATA[ 由   提交/u/tanishqq4  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofz4hk/what_does_print_function_do/</guid>
      <pubDate>Sat, 25 Oct 2025 18:38:43 GMT</pubDate>
    </item>
    <item>
      <title>代码如何运行的实用之旅：二进制文件、字节码和共享库</title>
      <link>https://www.reddit.com/r/programming/comments/1ofxr7i/a_practical_tour_of_how_code_runs_binaries/</link>
      <description><![CDATA[ 由   提交/u/Helpful_Geographer430   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofxr7i/a_practical_tour_of_how_code_runs_binaries/</guid>
      <pubDate>Sat, 25 Oct 2025 17:44:07 GMT</pubDate>
    </item>
    <item>
      <title>[R] Bauform：带有密码验证的生产级代码生成（100% 成功率）</title>
      <link>https://www.reddit.com/r/programming/comments/1ofwhd5/r_bauform_productiongrade_code_generation_with/</link>
      <description><![CDATA[我们推出 Bauform，一个生产级代码生成系统，用于生成、部署和验证具有加密签名的工作工具。四个工具公开，即时部署，无需调试。 关键： - 多模型编排 - 自动验证（功能、安全、性能、稳定性） - 所有结果上的 Ed25519 签名 - API：https://bauform-beta.fly.dev 完整详细信息：https://bauformsoftware.com 验证脚本：https://github.com/tekodu/bauform-evals   由   提交/u/deviolenza  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofwhd5/r_bauform_productiongrade_code_generation_with/</guid>
      <pubDate>Sat, 25 Oct 2025 16:53:33 GMT</pubDate>
    </item>
    <item>
      <title>伟大的 SaaS Gaslight</title>
      <link>https://www.reddit.com/r/programming/comments/1ofvtas/the_great_saas_gaslight/</link>
      <description><![CDATA[ 由   提交/u/pyeri  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofvtas/the_great_saas_gaslight/</guid>
      <pubDate>Sat, 25 Oct 2025 16:26:57 GMT</pubDate>
    </item>
    <item>
      <title>克劳德（Claude）在查找代码中的错误方面有多擅长？</title>
      <link>https://www.reddit.com/r/programming/comments/1ofvo8c/how_good_is_claude_at_finding_bugs_in_my_code/</link>
      <description><![CDATA[ 由   提交 /u/autarch   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofvo8c/how_good_is_claude_at_finding_bugs_in_my_code/</guid>
      <pubDate>Sat, 25 Oct 2025 16:21:16 GMT</pubDate>
    </item>
    <item>
      <title>您应该承担软件现代化项目吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1ofve2i/should_you_take_on_software_modernization_projects/</link>
      <description><![CDATA[ 由   提交 /u/Exact_Prior6299   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofve2i/should_you_take_on_software_modernization_projects/</guid>
      <pubDate>Sat, 25 Oct 2025 16:09:21 GMT</pubDate>
    </item>
    <item>
      <title>Fortran 编译器是 Flo pessin 和 Lois Haibt 发明的吗？</title>
      <link>https://www.reddit.com/r/programming/comments/1ofuwmm/did_flo_pessin_and_lois_haibt_invent_the_fortran/</link>
      <description><![CDATA[约翰·巴克斯 (John Backus) 通常被认为是 Fortran 的开发者，但他只是一个小组的领导者，他手下的人做了真正的工作。 flo pessin 是第一个弄清楚如何将代数公式翻译成机器代码的人，以及其他开创性的新编译技术，这些技术实际上塑造了当今所有的计算。 官方来源：https://eprints.cs.vt.edu/archive/ 00000875/01/CS82010-R.pdf（位于第23页和第24页，Beemer和pessin） 并且关注人们只是在后来重新发现了它 时间。 （他们还命名了 fortran，再次链接到源相同页面） Lois Haibt，除了发明代数表达式的句法分析之外：https://en.wikipedia.org/wiki/ Lois_Haibt 还编写了第 4 节的所有内容 项目本身，还编写了编译器循环控制和分支逻辑的所有关键部分。她的工作帮助编译器优化了执行路径，这在当时是革命性的。 总而言之，我想说这一切都应该为现代 Fortran 编译器的创建贡献至少 50% 的功劳，这很有趣，因为他们和其他 11 个人组成的团队，除了工作之外基本上什么都不做，他们就像工人一样   由   提交/u/Psychological_Bug_79  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofuwmm/did_flo_pessin_and_lois_haibt_invent_the_fortran/</guid>
      <pubDate>Sat, 25 Oct 2025 15:49:41 GMT</pubDate>
    </item>
    <item>
      <title>即时工程的本质是提出问题的艺术</title>
      <link>https://www.reddit.com/r/programming/comments/1ofu9ek/the_essence_of_prompt_engineering_is_the_art_of/</link>
      <description><![CDATA[ 由   提交 /u/SamrayLeung   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofu9ek/the_essence_of_prompt_engineering_is_the_art_of/</guid>
      <pubDate>Sat, 25 Oct 2025 15:23:21 GMT</pubDate>
    </item>
    <item>
      <title>现代完美哈希</title>
      <link>https://www.reddit.com/r/programming/comments/1oftyzn/modern_perfect_hashing/</link>
      <description><![CDATA[ 由   提交/u/iamkeyur   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oftyzn/modern_perfect_hashing/</guid>
      <pubDate>Sat, 25 Oct 2025 15:11:27 GMT</pubDate>
    </item>
    <item>
      <title>人工智能测试不是软件测试。欢迎来到人工智能测试工程师的时代。</title>
      <link>https://www.reddit.com/r/programming/comments/1oftk6g/ai_testing_isnt_software_testing_welcome_to_the/</link>
      <description><![CDATA[经过多年的数字化项目工作以及最后一对构建代理人工智能系统，有一件事已经变得公然、痛苦地清楚：人工智能测试不是软件测试。 作为技术专家，我们正在尝试使用旧地图来构建一个全新的大陆。这也是许多有前途的人工智能项目在交付真正价值之前就崩溃和烧毁的主要原因。 我们都痴迷于即时工程、上下文工程和代理工程。但我们完全忽略了最关键的学科：人工智能测试工程。 大反转：你的测试金字塔是颠倒的 在传统的软件测试中，我们靠测试金字塔生存和呼吸。基础广泛，具有快速、廉价的单元测试。然后是组件测试、集成测试，最后是高峰期的一些缓慢且昂贵的端到端 (E2E) 测试。 整个模型建立在一个基本假设之上：确定性。给定相同的输入，您总是得到相同的输出。 生成式人工智能破坏了这一假设。 从其设计本身来看，生成式人工智能是不确定的。即使将温度调低至 0，也不能保证逐位相同的响应。现在，想象一个具有多个子代理、一个规划模块和多个链接在一起的模型调用的代理系统。 这种非确定性不仅仅是相加，它还传播和放大。 结果是什么？人工智能中的测试金字塔是倒置的。  新的“简单”基础：当然，你的代理有工具。这些工具（例如对“get_customer_data”端点的 API 调用）通常是确定性的。您可以为它们编写单元测试，而且您应该这样做。您可以测试您的微服务。这部分快速而简单。 大规模、笨重的“顶部”：真正的工作，即 90% 的工作量，就是我们过去所说的“集成测试”。在代理人工智能中，这是整个系统的推理过程。它正在测试代理的行为，而不是其代码。这成为最大、最复杂、最关键的工作。  在这里阅读我的全文！ AI 测试不是软件测试。欢迎来到人工智能测试工程师的时代。 |作者：乔治·卡拉佩蒂安 | 2025 年 10 月 |中 你的想法是什么？   由   提交/u/AnythingNo920   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1oftk6g/ai_testing_isnt_software_testing_welcome_to_the/</guid>
      <pubDate>Sat, 25 Oct 2025 14:55:01 GMT</pubDate>
    </item>
    <item>
      <title>Python Web 服务的未来看起来将不再需要 GIL</title>
      <link>https://www.reddit.com/r/programming/comments/1ofqqdh/the_future_of_python_web_services_looks_gilfree/</link>
      <description><![CDATA[ 由   提交 /u/ashvar   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofqqdh/the_future_of_python_web_services_looks_gilfree/</guid>
      <pubDate>Sat, 25 Oct 2025 12:50:27 GMT</pubDate>
    </item>
    <item>
      <title>C实际上没有传递引用</title>
      <link>https://www.reddit.com/r/programming/comments/1ofjlo8/c_actually_dont_have_passbyreference/</link>
      <description><![CDATA[ 由   提交/u/Sushant098123  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/programming/comments/1ofjlo8/c_actually_dont_have_passbyreference/</guid>
      <pubDate>Sat, 25 Oct 2025 05:34:22 GMT</pubDate>
    </item>
    </channel>
</rss>