<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>最新提交：开源</title>
    <link>https://www.reddit.com/r/opensource/new</link>
    <description>与开源相关的所有内容的 Reddit 子版块（对于此上下文，我们在此不再定义开源的定义 http://en.wikipedia.org/wiki/Open_source）</description>
    <lastBuildDate>Mon, 27 Oct 2025 12:53:12 GMT</lastBuildDate>
    <item>
      <title>我构建了 Flowcraft，这是一个轻量级、零依赖的替代方案，可替代 Temporal/Airflow/Vercel 等重型工作流程平台</title>
      <link>https://www.reddit.com/r/opensource/comments/1ohbuza/i_built_flowcraft_a_lightweight_zerodependency/</link>
      <description><![CDATA[      您好 r/opensource， 我想向社区贡献一个名为 Flowcraft 的新项目。它是一个工作流程编排引擎，诞生于我对一种工具的探索，它比简单的任务队列更强大，但比 Airflow 或 Temporal 等成熟的平台简单。 项目理念： 我的目标是创建一个基础的、不带偏见的引擎，它能做好一件事：执行定义为数据的函数图。它被设计为您使用的库，而不是您服务的平台。  轻量级优先： 核心具有零运行时依赖性。您可以在任何 Javascript/TypeScript 运行时中使用它，而无需引入大量依赖树。 打开并打开它。可扩展：整个系统是围绕可插拔接口构建的。您可以用中间件替换记录器、表达式求值器、序列化器，甚至整个执行模型。 渐进可扩展性：我想避免过早的扩展决策。使用 Flowcraft，您只需编写一次业务逻辑。在内存中运行它。如果您的项目增长，您可以引入分布式系统的适配器（BullMQ、SQS、Kafka、RabbitMQ 等都有官方适配器）并进行扩展，而无需重写核心逻辑。这避免了架构级别的供应商锁定。 许可许可：该项目已获得 MIT 许可，因此您可以在任何个人或商业项目中自由使用它。  它有什么作用？ 它允许您将复杂的工作流程定义为 WorkflowBlueprint（一个简单的工作流程） 节点和边的 JSON 对象）并使用重试、回退、并行执行和条件分支等功能来执行它们。因为工作流程只是数据，所以您可以存储它、对其进行版本控制，甚至在其上构建可视化编辑器。 我投入了大量精力来使该项目受到欢迎，包括文档和演示、良好的测试覆盖率以及存储库中的示例，展示了如何将其用于从简单的 ETL 到复杂的 AI 代理的所有内容。 我在这里回答有关架构、动机或未来路线图的任何问题。如果您愿意查看并分享您的想法，我将非常荣幸。  GitHub 存储库： https://github.com/gorango/flowcraft 文档： https://flowcraft.js.org    由   提交 /u/goguspa   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ohbuza/i_built_flowcraft_a_lightweight_zerodependency/</guid>
      <pubDate>Mon, 27 Oct 2025 11:28:23 GMT</pubDate>
    </item>
    <item>
      <title>解锁索尼 PSP 的第二个 CPU</title>
      <link>https://www.reddit.com/r/opensource/comments/1oh9qzv/unlocking_the_sony_psps_second_cpu/</link>
      <description><![CDATA[大家好！ PSP 可能是一款旧设备，但它仍然蕴含着大量的秘密和修补的可能性！ 因此，我在今年早些时候启动了这个开源项目，目标是利用索尼 PSP 的媒体引擎，特别是它的第二个 MIPS CPU 核心，它与主核心具有基本相同的功能。 一个。 但是，它无法直接访问主要系统功能。它运行自己的“工厂”核心，其功能存储在内核内存空间中，尚未完全进行逆向工程。  该项目作为一个库，从媒体引擎核心映射尽可能多的功能，以便自制开发人员可以访问它们 它提供了自定义初始化系统和实用函数来简化媒体的使用 引擎。 它处理中断、挂起事件、堆栈和本地内存优化以及 WIP 中的线程管理。  它的设计目的是让 PSP 自制程序开发人员更轻松地与媒体引擎集成和通信。这是一项正在进行的工作，欢迎贡献！ 可在 GitHub 上获取：mcidclan/psp-media-engine-custom-core 享受吧！   由   提交/u/mcidclan   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1oh9qzv/unlocking_the_sony_psps_second_cpu/</guid>
      <pubDate>Mon, 27 Oct 2025 09:20:58 GMT</pubDate>
    </item>
    <item>
      <title>具有可验证共享的 Shamir 秘密共享的轻量级 Python 实现</title>
      <link>https://www.reddit.com/r/opensource/comments/1oh925h/lightweight_python_implementation_of_shamirs/</link>
      <description><![CDATA[嗨/开源！ 我为 Shamir 的秘密共享 (SSS) 构建了一个轻量级 Python 库，它将秘密（如密钥）分割成多个共享，只需要一个阈值即可重建。它还支持 Feldman 的可验证秘密共享，以安全地检查共享有效性。 我的项目的用途 基本上，您有一个秘密（密码、密钥、访问令牌、API 令牌、加密钱包密码、秘密公式/配方、核导弹代码）。您可以将您的秘密分享给您的朋友、同事、合作伙伴等，并且要重建您的秘密，您将需要至少 k 份。例如：总共 5 份，但您至少需要 3 份才能恢复秘密）。拥有少于 k 个份额的冒名顶替者对秘密一无所知（对于上下文，如果他拥有 3 个份额中的 2 个，即使具有无限的计算能力，他也无法恢复秘密 - 除非他利用离散对数问题，但这对于当前计算机来说是不可行的）。如果你愿意，你可以不使用这个 Feldman 方案（验证共享），这样即使有无限的计算能力，即使有无限的量子计算机，你的秘密也是安全的 - 从数学上讲，少于 k 个共享是不可能恢复秘密的 特点：  最小的 deps (pycryptodome)，纯 Python。 基于文件或变量 具有 Base64 共享的工作流程。 用于分割、验证和恢复秘密的简单 API。 MIT 许可，非常适合安全密钥管理或学习加密。  与其他实现的比较：  pycryptodome - 它只允许分割 16 个字节，而我的允许无限分割（只要你愿意） 等待，因为所有内容都是在本地计算机上计算的）。此外，此实现没有此功能，您可以在其中验证共享的有效性。另外，这会返回原始字节数组，其中我的返回base64（更容易传输/发送） 此存储库允许您共享您的秘密，但它应该已经采用数字格式，我的会自动将您的秘密转换为数字。此外，此存储库要求您将共享作为原始坐标，我认为这太技术性了。 其他说明：我的项目允许您使用变量或文件恢复您的秘密。它实施费尔德曼方案来验证您的份额。它以方便的格式存储共享 base64 等等，请查看文档  目标受众 我想说它已经做好了生产准备，因为它涵盖了所有安全措施：至少 1024 位的离散对数问题的质数、完美的保密性等等。 即便如此，我也不建议将其用于高机密数据（例如核导弹的代码），除非有专家确认其安全 检查一下：  PyPI：https://pypi.org/project/shamir-lbodlev/（pip install shamir-lbodlev） GitHub：https://github.com/lbodlev888/shamir（带示例的自述文件）  -反馈或功能想法？让我知道这里！   由   提交 /u/Excellent_Double_726   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1oh925h/lightweight_python_implementation_of_shamirs/</guid>
      <pubDate>Mon, 27 Oct 2025 08:34:09 GMT</pubDate>
    </item>
    <item>
      <title>🌍 GlobalCVE — 来自世界各地的统一 CVE 数据</title>
      <link>https://www.reddit.com/r/opensource/comments/1oh4buo/globalcve_unified_cve_data_from_around_the_world/</link>
      <description><![CDATA[大家好 👋 如果您跨多个 CVE 数据库跟踪漏洞，请查看 GlobalCVE。它聚合了来自 NVD、MITRE、CNNVD、JVN、CERT-FR 等的 CVE 数据 — 全部集中在一个可搜索源中。 它是开源 (GitHub)、API 友好的， 旨在减少分散的 CVE 列表中的重复和盲点。 并不华而不实 - 只是为研究人员、分析师和任何想要更清晰地了解全球漏洞数据的人提供的实用工具。   由   提交/u/reallylonguserthing  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1oh4buo/globalcve_unified_cve_data_from_around_the_world/</guid>
      <pubDate>Mon, 27 Oct 2025 03:34:28 GMT</pubDate>
    </item>
    <item>
      <title>最佳开源视频编辑器，用于多个子文件夹之间的分层视频剪辑管理</title>
      <link>https://www.reddit.com/r/opensource/comments/1ogywka/best_open_source_video_editor_for_hierarchical/</link>
      <description><![CDATA[我的主项目文件夹下面有两个文件夹： Folder01 包含其自己的名为“project01”的单独项目文件及其自己的剪辑。 Folder02 包含“project02”，这是一个单独的项目文件，仅包含几个剪辑，仅包含其他内容。 我们需要将 project01 包含为 project02 的时间线并将该文件集成到我们项目的时间线中，然后将其导出为单个 mp4 文件作为我们更大项目的一部分。有没有办法做到这一点，而不必在特定的开源视频编辑程序（如 shotcut、kdenlive 和 openshot）下先导出 project01？  这些开源视频编辑程序中的哪一个可以帮助我们实现涉及两个或多个此类子文件夹的复杂视频编辑任务（通过导入、 我的意思是能够包含一个项目文件并将其视为从我们时间线的角度来看的单个剪辑）？   由   提交 /u/Unique_Lake   [链接]   &lt;跨度&gt;[评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ogywka/best_open_source_video_editor_for_hierarchical/</guid>
      <pubDate>Sun, 26 Oct 2025 23:12:09 GMT</pubDate>
    </item>
    <item>
      <title>轻量级、简约/可定制的写作软件？</title>
      <link>https://www.reddit.com/r/opensource/comments/1ogx3lf/lightweight_minimalistcustomizable_software_for/</link>
      <description><![CDATA[我在纸上工作得更好，但是这很浪费，而且我的手腕讨厌我。 对于笔记，我使用记事本++，所有内容都被剥离，所以它只是一个空白窗口，但我不太觉得有必要在那里写。 Libreoffice 在我的电脑（3000g，8gbram）上落后了几十页，虽然我喜欢 gdocs，特别是因为它在云上工作，但它在超过一定程度后也表现不佳，有时还感觉有点笨拙。 ocne 以几种不同的方式） - 轻量级（我喜欢 notepad++ 允许我立即上下滚动几个 mb 的 txt，没有任何问题） - 理智（如果我将其复制粘贴到上面，基本上不会出现任何问题） - 没有干扰/混乱 有什么建议吗？   由   提交/u/simonbleu  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ogx3lf/lightweight_minimalistcustomizable_software_for/</guid>
      <pubDate>Sun, 26 Oct 2025 21:53:04 GMT</pubDate>
    </item>
    <item>
      <title>🌱 刚刚发布了我的第一个小型 Web 开发项目 - 仍在学习，但为它的进展感到自豪！</title>
      <link>https://www.reddit.com/r/opensource/comments/1oguq9r/just_released_my_first_small_web_dev_project/</link>
      <description><![CDATA[👋大家好！ 我学习网络开发有一段时间了（还是一名学生，每天都在努力变得更好），最后我决定分享我的第一个小项目。 这是一个简单的网页，我为练习 HTML、CSS 和 JavaScript 而构建 - 没什么大不了的，但它很有帮助 我了解布局、响应式设计和一点交互性。 该项目并不完美（远非完美），但我很乐意从更有经验的开发人员那里获得一些反馈或建议 - 特别是关于如何更好地构建我的代码或使设计更现代。 🔗 GitHub 存储库： https://github.com/SplashyFrost/Urban-Threads-Streetwear 我真的很愿意学习和改进，所以任何评论或提示都意义重大🙏感谢您花时间查看！   由   提交/u/cord_Line  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1oguq9r/just_released_my_first_small_web_dev_project/</guid>
      <pubDate>Sun, 26 Oct 2025 20:15:54 GMT</pubDate>
    </item>
    <item>
      <title>我的开源项目的新更新......现在有一个 UI</title>
      <link>https://www.reddit.com/r/opensource/comments/1oguhoj/new_updated_for_my_open_source_project_having_a/</link>
      <description><![CDATA[      我的开源项目想法对我来说变得越来越明显我将它命名为 Olan 顺便说一句，它就像 owl + learn 无论如何，我现在尽量保持简单的想法，我构建了一个前端应用程序，所以它当然会更现实 我还在考虑你也可以给我建议的主题我也希望你喜欢这个标志，是的，它看起来像duolingo ...实际上我想到了创建这个抽认卡应用程序，因为anki给我留下了深刻的印象，而且由于我是duolingo用户，我可以用猫头鹰来象征学习，所以我制作了这个版本请您的反馈让我为此更加努力！感谢您观看视频和您的时间   由   提交/u/AmenAngelo   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1oguhoj/new_updated_for_my_open_source_project_having_a/</guid>
      <pubDate>Sun, 26 Oct 2025 20:06:17 GMT</pubDate>
    </item>
    <item>
      <title>构建了一个包管理器来直接从 git 存储库编译和安装包</title>
      <link>https://www.reddit.com/r/opensource/comments/1ogsynu/built_a_package_manager_to_compile_install/</link>
      <description><![CDATA[      Vibe 这个周末编写了一些代码。  它自动检测构建系统、解决依赖关系、从源代码编译并管理所有来自 Git 存储库的安装。   由   提交/u/kritnu  [link] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ogsynu/built_a_package_manager_to_compile_install/</guid>
      <pubDate>Sun, 26 Oct 2025 19:05:07 GMT</pubDate>
    </item>
    <item>
      <title>开发了一款追踪世界顶级艺术家的应用程序</title>
      <link>https://www.reddit.com/r/opensource/comments/1ogrv9w/built_an_app_that_tracks_the_worlds_top_artists/</link>
      <description><![CDATA[大家好，我一直在致力于一个名为世界顶级艺术家的小项目：它跟踪世界排名前 500 名的艺术家，每天更新，提供见解、实时统计数据和发现功能。 数据来自 Spotify 和 Apple Music，汇总到一个地方。它包括一堆很酷的视图： – 为听众显示顶级城市的世界地图 – 显示艺术家如何联系的星座图（基于相关艺术家） – 一个“前 500 名”页面，用于跟踪从图表中退出的艺术家 – 基于每日趋势的艺术家和音乐发现功能 现在，该应用程序从 kworb.net，但我还保留了一个单独的文件，其中包含大约15,000位可能进入顶级列表的潜在艺术家。我选择这种方法是因为现在它是一个展示/mvp，我不想进行大量的抓取。如果应用程序显示出潜力并且 人们喜欢它，我计划将其移动到适当的服务器和域。我已经有了一种算法，可以直接从 Spotify 获取前 500 名，而不依赖其他来源。 有趣的是，整个事情完全是客户端，所以根本没有后端。 所有数据都作为静态 json 文件存储在 github 上，并且脚本通过 github actions 每 24 小时运行一次 重建并推送新数据。由于 next.js 导出优化，它速度快、轻量级，而且令人惊讶地能够处理 html、json 和 javascript 的内容：D 链接：https://music.eduardlupu.com github：https://github.com/EduardLupu/spotify-artists 我真的很想听到任何类型的反馈：您添加、改进或探索的东西。我想继续努力，但我有点缺乏新的东西 目前的想法。您认为接下来会看到哪些有趣或有趣的功能？   由   提交/u/Appropriate-Chip-224   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ogrv9w/built_an_app_that_tracks_the_worlds_top_artists/</guid>
      <pubDate>Sun, 26 Oct 2025 18:22:17 GMT</pubDate>
    </item>
    <item>
      <title>proton,单个 C++ 二进制文件中最快的 SQL 管道引擎，用于流处理、分析、可观察性和 AI,下载proton的源码_GitHub_酷徒</title>
      <link>https://www.reddit.com/r/opensource/comments/1ogrbv6/github_timeplusioproton_fastest_sql_pipeline/</link>
      <description><![CDATA[      Timeplus Proton 刚刚发布 3.0 在开源我们的核心引擎 Proton 两年后，我们很高兴地宣布推出 Proton 3.0 - 社区版迄今为止最大的升级。该版本为每位开发人员带来了成熟的流连接、处理和路由功能，并在单个二进制文件中提供了无与伦比的性能和效率。  借助 Proton 3.0，构建实时管道现在比以往更快、更简单、更有趣，其效率和性能在其他大型企业部署中得到了证明。  第一个在 Apache 2.0 下使用现代 C++ 编写的矢量化流 SQL 引擎 高吞吐量、低延迟、高基数  完全流处理 端到端：ETL、联接和聚合、警报和任务 与 Kafka、Redpanda、Pulsar、ClickHouse、Splunk、Elastic、MongoDB、S3、Apache Iceberg 等的原生连接 原生 Python/JavaScript UDF/UDAF 支持 零依赖的单一二进制文件    由   提交/u/gangtao  [link] [评论] ]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ogrbv6/github_timeplusioproton_fastest_sql_pipeline/</guid>
      <pubDate>Sun, 26 Oct 2025 18:01:10 GMT</pubDate>
    </item>
    <item>
      <title>修复了 PondPilot 中的一些 UI 错误 - 关于为 DuckDB 浏览器项目做出贡献的想法</title>
      <link>https://www.reddit.com/r/opensource/comments/1ogqvpp/fixed_some_ui_bugs_in_pondpilot_thoughts_on/</link>
      <description><![CDATA[嗨，我想分享过去几周在 PondPilot 上工作的经验。我修复了一些 UI 错误——没有什么突破性的，但它让我对这个项目的工作原理产生了兴趣。如果您不熟悉，PondPilot 本质上是一个使用 DuckDB-WASM 在浏览器中运行的 SQL 服务器。一切都存储在本地，无需将数据上传到服务器。 这是一个有趣的想法；我将在我的项目中实现它，并以它为起点。 GitHub：https://github.com/pondpilot/pondpilot   由   提交/u/Significant-Guest-14   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ogqvpp/fixed_some_ui_bugs_in_pondpilot_thoughts_on/</guid>
      <pubDate>Sun, 26 Oct 2025 17:43:55 GMT</pubDate>
    </item>
    <item>
      <title>我刚刚发布了 AMI：一个 Apache 2.0 开源工具，用于监控真实的互联网连接（不仅仅是本地 Wi-Fi）。</title>
      <link>https://www.reddit.com/r/opensource/comments/1ogq5o1/i_just_released_ami_an_apache_20_opensource_tool/</link>
      <description><![CDATA[嘿 r/opensource 社区， 我想分享一个我刚刚在 Apache 2.0 许可证下开源的新项目：AMI（主动监控 互联网）。 该项目的诞生源于我在不稳定的连接（如火车 Wi-Fi）上工作的挫败感。我的笔记本电脑总是显示“已连接”但互联网经常死机。标准 ping 工具不够智能，因为它们无法区分连接到路由器 (LAN) 和实际访问 Web 的情况。 AMI 通过结合使用 ICMP 和 HTTP 验证来确定互联网连接的真实状态来解决此问题。 为什么我在这里分享它：  100% 开源：它已在 Apache 2.0 下获得许可，并提供完整代码。 技术堆栈：它是使用 Python、PyQt6（用于 UI）和 Matplotlib（用于图形）构建的。 主要功能：它提供了一个现代/可访问的仪表板（色盲友好）、本机 通知和 CSV 日志记录，全部都在一个轻量级、可移植的包中。  我相信开源工具的力量，并且希望您能够检查它、审核代码，甚至在您发现它有用时做出贡献。非常欢迎错误报告和反馈！ GitHub 存储库（源代码和版本）： https://github.com/dgiovannetti/AMI 项目页面（更多 信息）： https://ciaoim.tech/projects/ami/ 感谢您的宝贵时间！   由   提交/u/dgiovannetti   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ogq5o1/i_just_released_ami_an_apache_20_opensource_tool/</guid>
      <pubDate>Sun, 26 Oct 2025 17:15:51 GMT</pubDate>
    </item>
    <item>
      <title>我构建了一个开源 Steam 自动化工具 (Steam Game Idler) 作为 ArchiSteamFarm、Steam Achievement Manager 和 Idle Master 的替代品</title>
      <link>https://www.reddit.com/r/opensource/comments/1ognzvr/i_built_an_opensource_steam_automation_tool_steam/</link>
      <description><![CDATA[TL;DR: 创建了 Steam Game Idler - 一款现代、用户友好的工具，用于耕种 Steam 交易卡、管理成就和增加游戏时间。完全开源，无遥测，使用官方 Steam API。 问题 如果您是 PC 游戏玩家，您就会知道 Steam 的交易卡系统很乏味。你需要让游戏闲置几个小时才能获得卡牌掉落。对于 500 多个游戏库，这是不切实际的。 现有的解决方案（例如 ArchiSteamFarm）功能强大但很复杂（JSON 配置、CLI 为主、专为无头服务器设计）。 Idle Master 很棒，但在 2016 年被放弃了，Idle Master Extended 也有它的错误。 解决方案 我将 Steam Game Idler (SGI) 构建为：  现代堆栈： Tauri + TypeScript + Rust（轻量级、快速、原生） 用户友好：实际 GUI，无需配置文件 一体化：在一个应用程序中集卡牌耕作、成就管理和游戏时间提升于一体 安全第一：基于 XOR 的混淆、官方 Steamworks SDK、零遥测 完全 开源： 自己审核代码  功能  同时闲置最多 32 个游戏（Steam 的限制） 以类似人类的计时方式自动解锁成就 手动锁定/解锁任何成就 集换式卡牌库存管理器 游戏时间助推器 卡牌掉落的实时通知  为什么开源很重要 Steam 自动化工具名声不佳 - 有些是恶意软件，有些是粗略的。我想要完全透明：  任何人都可以查看源代码 如果您不信任二进制文件，请从源代码构建 欢迎社区贡献 没有隐藏的遥测或数据收集  该项目拥有 300 多个 GitHub star 以及活跃的问题和讨论。 技术堆栈  前端： TypeScript + React (NextJS) 后端： Rust（通过 Tauri） API： 官方 Steamworks SDK（非逆向工程黑客）和自定义 C# 工具 安全性： 本地凭据的自定义基于 XOR 的混淆 存储 平台： Windows  当前状态  ✅ 稳定版本 (v2.1.20) ✅ 积极开发 ✅ 完整文档位于 steamgameidler.com ❌ Linux/Mac 支持  经验教训 构建这个教会了我很多知识：  使用专有 API（Steamworks...很有趣） 平衡高级用户功能与初学者用户体验 本地凭证存储的安全最佳实践 为什么 Tauri 很棒 桌面应用程序（比 Electron 更小的包大小，原生性能）  参与  GitHub： github.com/zevnda/steam-game-idler 文档： steamgameidler.com 欢迎提出问题/PR！  很高兴回答有关技术堆栈、Steam API 或其他任何问题的问题。也欢迎反馈和功能请求。 注意：这是我自己使用的个人项目。 Steam 的服务条款在自动化方面含糊其辞，因此使用风险需您自担。已有 10 多年的类似工具没有被禁止的报道，但 YMMV。   由   提交 /u/RagingAtLiife   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ognzvr/i_built_an_opensource_steam_automation_tool_steam/</guid>
      <pubDate>Sun, 26 Oct 2025 15:49:21 GMT</pubDate>
    </item>
    <item>
      <title>您最喜欢的带有 MV3 和垂直选项卡的基于 Chromium 的开源浏览器是什么？</title>
      <link>https://www.reddit.com/r/opensource/comments/1ognl7j/whats_your_favorite_open_source_chromiumbased/</link>
      <description><![CDATA[嗨r/opensource，自从 zen 浏览器问世以来，我一直是它的重度用户，因此我真的想要一个具有类似功能（适当的广告块、垂直选项卡、容器化工作区）的浏览器，但我希望它是 基于 chromium，就在上周，我遇到了 5 个无法在 Firefox 上运行的网站（下拉菜单损坏、注册按钮不起作用、重要元素没有出现），并且很难继续使用它。    由   提交/u/cel7t  [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/opensource/comments/1ognl7j/whats_your_favorite_open_source_chromiumbased/</guid>
      <pubDate>Sun, 26 Oct 2025 15:32:52 GMT</pubDate>
    </item>
    </channel>
</rss>